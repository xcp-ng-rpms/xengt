From 188e273b0196c87f164452f11830891a58286696 Mon Sep 17 00:00:00 2001
From: Paul Durrant <paul.durrant@citrix.com>
Date: Wed, 16 Sep 2015 11:53:24 +0800
Subject: [PATCH 168/403] Update XenGT I/O emulation logic.

The XenGT I/O emulation code is not correctly implemented and can
race with Xen, leading to a domain_crash() of the guest. Specifically
it is always unsafe for an emulator to drive ioreq state from NONE
to anything else, and XenGT may drive it from NONE to RESP_READY
This patch is to fix this issue on XenServer, from Citrix Paul Durrant.
Corresponding bug number in bugzilla is: #837.

Signed-off-by: Paul Durrant <paul.durrant@citrix.com>
Signed-off-by: Terrence Xu <terrence.xu@intel.com>
---
 drivers/xen/xengt.c |   56 ++++++++++++++++++++++++++++++---------------------
 1 file changed, 33 insertions(+), 23 deletions(-)

diff --git a/drivers/xen/xengt.c b/drivers/xen/xengt.c
index f2a5078..03362fb 100644
--- a/drivers/xen/xengt.c
+++ b/drivers/xen/xengt.c
@@ -837,42 +837,50 @@ static int vgt_hvm_do_ioreq(struct vgt_device *vgt, struct ioreq *ioreq)
 	struct pgt_device *pdev = vgt->pdev;
 	uint64_t bdf = PCI_BDF2(pdev->pbus->number, pdev->devfn);
 
-	/* When using ioreq-server, sometimes an event channal
-	 * notification is received with invalid ioreq. Don't
-	 * know the root cause. Put the workaround here.
-	 */
-	if (ioreq->state == STATE_IOREQ_NONE)
-		return 0;
+	int rc = 0;
 
-	if (ioreq->type == IOREQ_TYPE_INVALIDATE)
-		return 0;
+	BUG_ON(ioreq->state != STATE_IOREQ_INPROCESS);
 
 	switch (ioreq->type) {
-		case IOREQ_TYPE_PCI_CONFIG:
+	case IOREQ_TYPE_PCI_CONFIG:
 		/* High 32 bit of ioreq->addr is bdf */
 		if ((ioreq->addr >> 32) != bdf) {
 			printk(KERN_ERR "vGT: Unexpected PCI Dev %lx emulation\n",
-				(unsigned long) (ioreq->addr>>32));
-				return -EINVAL;
-			} else
-				return _hvm_pio_emulation(vgt, ioreq);
-			break;
-		case IOREQ_TYPE_COPY:	/* MMIO */
-			return _hvm_mmio_emulation(vgt, ioreq);
-			break;
-		default:
-			printk(KERN_ERR "vGT: Unknown ioreq type %x addr %llx size %u state %u\n",
-				ioreq->type, ioreq->addr, ioreq->size, ioreq->state);
-			return -EINVAL;
+			(unsigned long) (ioreq->addr>>32));
+			rc = -EINVAL;
+		} else
+			rc = _hvm_pio_emulation(vgt, ioreq);
+		break;
+	case IOREQ_TYPE_COPY:   /* MMIO */
+		rc = _hvm_mmio_emulation(vgt, ioreq);
+		break;
+	case IOREQ_TYPE_INVALIDATE:
+	case IOREQ_TYPE_TIMEOFFSET:
+		break;
+	default:
+		printk(KERN_ERR "vGT: Unknown ioreq type %x addr %llx size %u state %u\n", 
+			ioreq->type, ioreq->addr, ioreq->size, ioreq->state);
+		rc = -EINVAL;
+		break;
 	}
 
-	return 0;
+	wmb();
+
+	return rc;
 }
 
 static struct ioreq *vgt_get_hvm_ioreq(struct vgt_device *vgt, int vcpu)
 {
 	struct vgt_hvm_info *info = vgt->hvm_info;
-	return &(info->iopage->vcpu_ioreq[vcpu]);
+	ioreq_t *req = &(info->iopage->vcpu_ioreq[vcpu]);
+
+	if (req->state != STATE_IOREQ_READY)
+	  return NULL;
+
+	rmb();
+
+	req->state = STATE_IOREQ_INPROCESS;
+	return req;
 }
 
 static int vgt_emulation_thread(void *priv)
@@ -908,6 +916,8 @@ static int vgt_emulation_thread(void *priv)
 				continue;
 
 			ioreq = vgt_get_hvm_ioreq(vgt, vcpu);
+			if (ioreq == NULL)
+				continue;
 
 			if (vgt_hvm_do_ioreq(vgt, ioreq) ||
 					!vgt_ops->expand_shadow_page_mempool(vgt->pdev)) {
-- 
1.7.10.4

