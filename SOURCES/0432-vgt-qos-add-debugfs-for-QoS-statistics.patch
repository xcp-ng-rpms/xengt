From 4709dbfbb2c35703ac7a892d5a1cb2787318637c Mon Sep 17 00:00:00 2001
From: Ping Gao <ping.a.gao@intel.com>
Date: Mon, 12 Sep 2016 12:43:28 +0800
Subject: [PATCH 432/433] vgt: qos: add debugfs for QoS statistics

add debugfs interface to query vGPU resource occupancy and HW
utilization.

Signed-off-by: Ping Gao <ping.a.gao@intel.com>
Reviewed-by: Kevin Tian <kevin.tian@intel.com>
---
 drivers/gpu/drm/i915/vgt/debugfs.c |   62 ++++++++++++++++++++++++++++++++++++
 1 file changed, 62 insertions(+)

diff --git a/drivers/gpu/drm/i915/vgt/debugfs.c b/drivers/gpu/drm/i915/vgt/debugfs.c
index d74253d..3099f4d 100644
--- a/drivers/gpu/drm/i915/vgt/debugfs.c
+++ b/drivers/gpu/drm/i915/vgt/debugfs.c
@@ -1157,6 +1157,63 @@ static const struct file_operations vgt_el_context_fops = {
 	.release = single_release,
 };
 
+static int vgt_qos_stat_show(struct seq_file *m, void *data)
+{
+	struct pgt_device *pdev = (struct pgt_device *)m->private;
+	struct vgt_device *vgt = NULL;
+	static u64 last_record_time, cur_record_time;
+	int cpu;
+
+	vgt_lock_dev(pdev, cpu);
+
+	cur_record_time  = vgt_get_cycles();
+
+	list_for_each_entry(vgt, &pdev->rendering_runq_head, list) {
+		seq_printf(m, "VM-%d Sched time: %llu",
+			vgt->vm_id, vgt->sched_info.sched_time);
+		seq_printf(m, " Busy time: %llu",
+			vgt->sched_info.busy_time);
+
+		if (cur_record_time > last_record_time &&
+				vgt->sched_info.sched_time -
+					vgt->stat.last_sched_time) {
+			seq_printf(m, " vGPU portion: %d HW utilization: %d\n",
+				(u32)((vgt->sched_info.sched_time -
+					vgt->stat.last_sched_time) * 100 /
+					(cur_record_time - last_record_time)),
+				(u32)((vgt->sched_info.busy_time -
+					vgt->stat.last_busy_time) * 100 /
+				(vgt->sched_info.sched_time -
+					vgt->stat.last_sched_time)));
+		} else {
+			seq_printf(m, "vGPU portion: 0 HW utilization: 0\n");
+		}
+
+		vgt->stat.last_sched_time = vgt->sched_info.sched_time;
+		vgt->stat.last_busy_time = vgt->sched_info.busy_time;
+	}
+
+	last_record_time = vgt_get_cycles();
+
+	vgt_unlock_dev(pdev, cpu);
+
+	seq_puts(m, "\n");
+	return 0;
+}
+
+static int vgt_qos_stat_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, vgt_qos_stat_show, inode->i_private);
+}
+
+static const struct file_operations vgt_qos_stat_fops = {
+	.open = vgt_qos_stat_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+
 /* initialize vGT debufs top directory */
 struct dentry *vgt_init_debugfs(struct pgt_device *pdev)
 {
@@ -1196,6 +1253,11 @@ struct dentry *vgt_init_debugfs(struct pgt_device *pdev)
 	if (!temp_d)
 		return NULL;
 
+	temp_d = debugfs_create_file("show_qos_stat", 0444, d_vgt_debug,
+		pdev, &vgt_qos_stat_fops);
+	if (!temp_d)
+		return NULL;
+
 	debugfs_create_u64_node("context_switch_cycles", 0440, d_vgt_debug,
 				&pdev->stat.context_switch_cost);
 	debugfs_create_u64_node("context_switch_num", 0440, d_vgt_debug,
-- 
1.7.10.4

