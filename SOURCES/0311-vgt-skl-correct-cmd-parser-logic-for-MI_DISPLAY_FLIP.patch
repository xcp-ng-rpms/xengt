From 6dc5fab9d3430612773d64007480b6b84557ccce Mon Sep 17 00:00:00 2001
From: Min He <min.he@intel.com>
Date: Thu, 31 Dec 2015 21:36:49 +0800
Subject: [PATCH 311/403] vgt/skl: correct cmd parser logic for
 MI_DISPLAY_FLIP on SKL

On SKL, the format of MI_DISPLAY_FLIP command has changed comparing to BDW:
    1. the plane select bitfield in DW0
    2. the tile parameter bitfile in DW1
    3. the stride define in plane stride reg
This patch is to implement correct logic to handle MI_DISPLAY_FLIP command
in cmd parser.
The patch fixed bug 907.

--V2:
Removed phy_stride check when panel fitting not enabled, according to
Zhiyuan and Zhi's suggestion.

Signed-off-by: Min He <min.he@intel.com>
Signed-off-by: Zhi Wang <zhi.a.wang@intel.com>
---
 drivers/gpu/drm/i915/vgt/cmd_parser.c |  111 +++++++++++++++++++++++++--------
 drivers/gpu/drm/i915/vgt/reg.h        |    1 +
 2 files changed, 87 insertions(+), 25 deletions(-)

diff --git a/drivers/gpu/drm/i915/vgt/cmd_parser.c b/drivers/gpu/drm/i915/vgt/cmd_parser.c
index 5663567..9b66391 100644
--- a/drivers/gpu/drm/i915/vgt/cmd_parser.c
+++ b/drivers/gpu/drm/i915/vgt/cmd_parser.c
@@ -1116,10 +1116,13 @@ static int vgt_cmd_handler_mi_batch_buffer_end(struct parser_exec_state *s)
  */
 #define PLANE_SELECT_SHIFT	19
 #define PLANE_SELECT_MASK	(0x7 << PLANE_SELECT_SHIFT)
+#define SKL_PLANE_SELECT_SHIFT  8
+#define SKL_PLANE_SELECT_MASK   (0x1F << SKL_PLANE_SELECT_SHIFT)
 #define SURF_MASK		0xFFFFF000
 #define PITCH_MASK		0x0000FFC0
 #define TILE_PARA_SHIFT		0x0
 #define TILE_PARA_MASK		0x1
+#define SKL_TILE_PARA_MASK      0x7
 /* Primary plane and sprite plane has the same tile shift in control reg */
 #define PLANE_TILE_SHIFT	_PRI_PLANE_TILE_SHIFT
 #define PLANE_TILE_MASK		(0x1 << PLANE_TILE_SHIFT)
@@ -1142,8 +1145,30 @@ static int vgt_cmd_handler_mi_batch_buffer_end(struct parser_exec_state *s)
 #define PLANE_INFO_SHIFT	8
 #define PLANE_INFO_MASK		(0x7 << PLANE_INFO_SHIFT)
 
-static bool display_flip_decode_plane_info(uint32_t  plane_code, enum pipe *pipe, enum vgt_plane_type *plane )
+static bool display_flip_decode_plane_info(struct pgt_device *pdev,
+		uint32_t  plane_code, enum pipe *pipe,
+		enum vgt_plane_type *plane)
 {
+	if (IS_SKL(pdev)) {
+		plane_code <<= SKL_PLANE_SELECT_SHIFT;
+		switch (plane_code) {
+		case MI_DISPLAY_FLIP_SKL_PLANE_1_A:
+			*pipe = PIPE_A;
+			break;
+		case MI_DISPLAY_FLIP_SKL_PLANE_1_B:
+			*pipe = PIPE_B;
+			break;
+		case MI_DISPLAY_FLIP_SKL_PLANE_1_C:
+			*pipe = PIPE_C;
+			break;
+		default:
+			vgt_warn("unknown plane_code 0x%x\n", plane_code);
+			return false;
+		}
+		*plane = PRIMARY_PLANE;
+		return true;
+	}
+
 	switch (plane_code) {
 		case DISPLAY_FLIP_PLANE_A:
 			*pipe = PIPE_A;
@@ -1177,8 +1202,32 @@ static bool display_flip_decode_plane_info(uint32_t  plane_code, enum pipe *pipe
 
 }
 
-static bool display_flip_encode_plane_info(enum pipe pipe, enum vgt_plane_type plane, uint32_t * plane_code)
+static bool display_flip_encode_plane_info(struct pgt_device *pdev,
+		enum pipe pipe, enum vgt_plane_type plane,
+		uint32_t *plane_code)
 {
+	if (IS_SKL(pdev)) {
+		if (plane != PRIMARY_PLANE) {
+			vgt_err("only support primary_plane\n");
+			return false;
+		}
+
+		switch (pipe) {
+		case PIPE_A:
+			*plane_code = MI_DISPLAY_FLIP_SKL_PLANE_1_A;
+			break;
+		case PIPE_B:
+			*plane_code = MI_DISPLAY_FLIP_SKL_PLANE_1_B;
+			break;
+		case PIPE_C:
+			*plane_code = MI_DISPLAY_FLIP_SKL_PLANE_1_C;
+			break;
+		default:
+			vgt_warn("unknown pipe 0x%x\n", pipe);
+			return false;
+		}
+		return true;
+	}
 
 	if (pipe == PIPE_A && plane == PRIMARY_PLANE)
 		*plane_code = DISPLAY_FLIP_PLANE_A;
@@ -1225,32 +1274,28 @@ static bool vgt_flip_parameter_check(struct parser_exec_state *s,
 	enum pipe pipe = I915_MAX_PIPES;
 	enum vgt_plane_type plane = MAX_PLANE;
 	uint32_t surf_reg, ctrl_reg;
-	uint32_t stride_reg, stride_mask, phys_stride;
+	uint32_t stride_reg, stride_mask;
 	uint32_t tile_para, tile_in_ctrl;
+	uint32_t plane_tile_mask, tile_mask, stride_shift;
 	bool async_flip;
 
-	if (!display_flip_decode_plane_info(plane_code, &pipe, &plane))
+	if (!display_flip_decode_plane_info(pdev, plane_code, &pipe, &plane))
 		return false;
 
 	GET_INFO_FOR_FLIP(pipe, plane,
 			ctrl_reg, surf_reg, stride_reg, stride_mask);
 
+	stride_mask = IS_SKL(pdev) ? SKL_PLANE_STRIDE_MASK : stride_mask;
+	tile_mask = IS_SKL(pdev) ? SKL_TILE_PARA_MASK : TILE_PARA_MASK;
+	plane_tile_mask = IS_SKL(pdev) ? PLANE_CTL_TILED_MASK : PLANE_TILE_MASK;
+	stride_shift = IS_SKL(pdev) ? _PRI_PLANE_STRIDE_SHIFT : 0;
+
 	async_flip = ((surf_val & FLIP_TYPE_MASK) == 0x1);
-	tile_para = ((stride_val & TILE_PARA_MASK) >> TILE_PARA_SHIFT);
-	tile_in_ctrl = (__vreg(s->vgt, ctrl_reg) & PLANE_TILE_MASK)
+	tile_para = ((stride_val & tile_mask) >> TILE_PARA_SHIFT);
+	tile_in_ctrl = (__vreg(s->vgt, ctrl_reg) & plane_tile_mask)
 				>> PLANE_TILE_SHIFT;
 
-	phys_stride = __vreg(current_display_owner(pdev), stride_reg);
-	if ((s->vgt != current_display_owner(pdev)) && !enable_panel_fitting &&
-		(plane == PRIMARY_PLANE) &&
-		((stride_val & PITCH_MASK) !=
-			(phys_stride & stride_mask))) {
-		vgt_dbg(VGT_DBG_CMD, "Stride value may not match display timing! "
-			"MI_DISPLAY_FLIP will be ignored!\n");
-		return false;
-	}
-
-	if ((__vreg(s->vgt, stride_reg) & stride_mask)
+	if (((__vreg(s->vgt, stride_reg) & stride_mask) << stride_shift)
 		!= (stride_val & PITCH_MASK)) {
 
 		if (async_flip) {
@@ -1273,6 +1318,7 @@ static bool vgt_flip_parameter_check(struct parser_exec_state *s,
 static int vgt_handle_mi_display_flip(struct parser_exec_state *s, bool resubmitted)
 {
 	struct vgt_device *vgt = s->vgt;
+	struct pgt_device *pdev = vgt->pdev;
 	uint32_t surf_reg, surf_val, ctrl_reg;
 	uint32_t stride_reg, stride_val, stride_mask;
 	uint32_t tile_para;
@@ -1284,21 +1330,31 @@ static int vgt_handle_mi_display_flip(struct parser_exec_state *s, bool resubmit
 	struct fb_notify_msg msg;
 	uint32_t value;
 	int surf_size = 0;
+	uint32_t plane_select_mask, plane_select_shift;
+	uint32_t tile_mask, plane_tile_mask, stride_shift;
 
 	opcode = cmd_val(s, 0);
 	stride_val = cmd_val(s, 1);
 	surf_val = cmd_val(s, 2);
 
+	plane_select_mask = IS_SKL(pdev) ? SKL_PLANE_SELECT_MASK :
+		PLANE_SELECT_MASK;
+	plane_select_shift = IS_SKL(pdev) ? SKL_PLANE_SELECT_SHIFT :
+		PLANE_SELECT_MASK;
+	tile_mask = IS_SKL(pdev) ? SKL_TILE_PARA_MASK : TILE_PARA_MASK;
+	plane_tile_mask = IS_SKL(pdev) ? PLANE_CTL_TILED_MASK : PLANE_TILE_MASK;
+	stride_shift = IS_SKL(pdev) ? _PRI_PLANE_STRIDE_SHIFT : 0;
+
 	if (resubmitted) {
 		plane_code = (opcode & PLANE_INFO_MASK) >> PLANE_INFO_SHIFT;
 		length = opcode & CMD_LENGTH_MASK;
 	} else {
-		plane_code = (opcode & PLANE_SELECT_MASK) >> PLANE_SELECT_SHIFT;
+		plane_code = (opcode & plane_select_mask) >> plane_select_shift;
 		length = cmd_length(s);
 	}
 
 
-	if (!display_flip_decode_plane_info(plane_code, &pipe, &plane)) {
+	if (!display_flip_decode_plane_info(pdev, plane_code, &pipe, &plane)) {
 		vgt_warn("Invalid pipe/plane in MI_DISPLAY_FLIP!\n");
 		goto wrong_command;
 	}
@@ -1319,12 +1375,16 @@ static int vgt_handle_mi_display_flip(struct parser_exec_state *s, bool resubmit
 
 		GET_INFO_FOR_FLIP(pipe, plane,
 			ctrl_reg, surf_reg, stride_reg, stride_mask);
-		tile_para = ((stride_val & TILE_PARA_MASK) >> TILE_PARA_SHIFT);
 
-		__vreg(s->vgt, stride_reg) = (stride_val & stride_mask) |
+		stride_mask = IS_SKL(pdev) ? SKL_PLANE_STRIDE_MASK :
+			stride_mask;
+		tile_para = ((stride_val & tile_mask) >> TILE_PARA_SHIFT);
+
+		__vreg(s->vgt, stride_reg) = ((stride_val >> stride_shift) &
+				stride_mask) |
 				(__vreg(s->vgt, stride_reg) & (~stride_mask));
 		__vreg(s->vgt, ctrl_reg) = (tile_para << PLANE_TILE_SHIFT) |
-				(__vreg(s->vgt, ctrl_reg) & (~PLANE_TILE_MASK));
+				(__vreg(s->vgt, ctrl_reg) & (~plane_tile_mask));
 		__vreg(s->vgt, surf_reg) = (surf_val & SURF_MASK) |
 				(__vreg(s->vgt, surf_reg) & (~SURF_MASK));
 		__sreg(s->vgt, stride_reg) = __vreg(s->vgt, stride_reg);
@@ -1361,14 +1421,15 @@ static int vgt_handle_mi_display_flip(struct parser_exec_state *s, bool resubmit
 	vgt_fb_notifier_call_chain(FB_DISPLAY_FLIP, &msg);
 
 	if ((s->vgt == current_foreground_vm(s->vgt->pdev)) && !resubmitted) {
-		if(!display_flip_encode_plane_info(real_pipe, plane, &real_plane_code))
+		if (!display_flip_encode_plane_info(pdev, real_pipe,
+					plane, &real_plane_code))
 			goto wrong_command;
 
 		value = cmd_val(s, 0);
 		add_patch_entry(s,
 			cmd_ptr(s, 0),
-			((value & ~PLANE_SELECT_MASK) |
-			 (real_plane_code << PLANE_SELECT_SHIFT)));
+			((value & ~plane_select_mask) |
+			 (real_plane_code << plane_select_shift)));
 
 		vgt_inject_flip_done(s->vgt, pipe);
 
diff --git a/drivers/gpu/drm/i915/vgt/reg.h b/drivers/gpu/drm/i915/vgt/reg.h
index b3764bd..c0ae74e 100644
--- a/drivers/gpu/drm/i915/vgt/reg.h
+++ b/drivers/gpu/drm/i915/vgt/reg.h
@@ -320,6 +320,7 @@ static inline uint32_t __RING_REG(int32_t ring_id, uint32_t rcs_reg)
 
 #define	_PRI_PLANE_STRIDE_SHIFT	6
 #define	_PRI_PLANE_STRIDE_MASK	(0x3ff << _PRI_PLANE_STRIDE_SHIFT)
+#define	SKL_PLANE_STRIDE_MASK	0x3ff
 
 #define	_PRI_PLANE_X_OFF_SHIFT	0
 #define	_PRI_PLANE_X_OFF_MASK	(0x1fff << _PRI_PLANE_X_OFF_SHIFT)
-- 
1.7.10.4

