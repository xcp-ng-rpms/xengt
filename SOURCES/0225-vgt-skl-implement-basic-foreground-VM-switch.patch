From 997f705104aaf7ec8be5d164ae50b8f58702dd7a Mon Sep 17 00:00:00 2001
From: Zhi Wang <zhi.a.wang@intel.com>
Date: Fri, 6 Nov 2015 04:44:57 +0800
Subject: [PATCH 225/403] vgt/skl: implement basic foreground VM switch

Implement foreground VM switch on SKL

As different guests may use different DBUF configurations and set different
watermark according to their plane usage on SKL, these configurations also
need to be switched in foreground VM switch.

Signed-off-by: Zhi Wang <zhi.a.wang@intel.com>
---
 drivers/gpu/drm/i915/vgt/display.c |   75 ++++++++++++++++++++++++++++++++----
 1 file changed, 68 insertions(+), 7 deletions(-)

diff --git a/drivers/gpu/drm/i915/vgt/display.c b/drivers/gpu/drm/i915/vgt/display.c
index 4fd8817..db05343 100644
--- a/drivers/gpu/drm/i915/vgt/display.c
+++ b/drivers/gpu/drm/i915/vgt/display.c
@@ -113,13 +113,76 @@ int prepare_for_display_switch(struct pgt_device *pdev)
 	return ret;
 }
 
+void legacy_do_vgt_fast_display_switch(struct pgt_device *pdev)
+{
+	struct vgt_device *to_vgt = pdev->next_foreground_vm;
+	enum pipe pipe;
+
+	for (pipe = PIPE_A; pipe < I915_MAX_PIPES; ++ pipe) {
+		vgt_restore_state(to_vgt, pipe);
+		if (DISPLAY_PLANE_ENABLE & __vreg(to_vgt, VGT_DSPCNTR(pipe))) {
+			set_panel_fitting(to_vgt, pipe);
+		}
+	}
+}
+
+void skl_restore_wm_dbuf_state(struct vgt_device *vgt, enum pipe pipe)
+{
+	int level;
+
+	vgt_restore_sreg(vgt, PIPE_WM_LINETIME(pipe));
+
+	for (level = 0; level <= 7; level++) {
+		vgt_restore_sreg(vgt, PLANE_WM(pipe, 0, level));
+		vgt_restore_sreg(vgt, PLANE_WM(pipe, 1, level));
+		vgt_restore_sreg(vgt, PLANE_WM(pipe, 2, level));
+		vgt_restore_sreg(vgt, CUR_WM(pipe, level));
+	}
+
+	vgt_restore_sreg(vgt, PLANE_WM_TRANS(pipe, 0));
+	vgt_restore_sreg(vgt, PLANE_WM_TRANS(pipe, 1));
+	vgt_restore_sreg(vgt, PLANE_WM_TRANS(pipe, 2));
+	vgt_restore_sreg(vgt, CUR_WM_TRANS(pipe));
+
+	vgt_restore_sreg(vgt, PLANE_BUF_CFG(pipe, 0));
+	vgt_restore_sreg(vgt, PLANE_BUF_CFG(pipe, 1));
+	vgt_restore_sreg(vgt, PLANE_BUF_CFG(pipe, 2));
+
+	vgt_restore_sreg(vgt, PLANE_NV12_BUF_CFG(pipe, 0));
+	vgt_restore_sreg(vgt, PLANE_NV12_BUF_CFG(pipe, 1));
+	vgt_restore_sreg(vgt, PLANE_NV12_BUF_CFG(pipe, 2));
+	vgt_restore_sreg(vgt, CUR_BUF_CFG(pipe));
+}
+
+void skl_do_vgt_fast_display_switch(struct pgt_device *pdev)
+{
+	struct vgt_device *to_vgt = pdev->next_foreground_vm;
+	enum pipe pipe;
+
+	/*
+	 * Step 1: Restore all WM/DBUF registers for each pipe.
+	 */
+	for (pipe = PIPE_A; pipe < I915_MAX_PIPES; ++ pipe)
+		skl_restore_wm_dbuf_state(to_vgt, pipe);
+
+	/*
+	 * Step 2: Restore the other pipe state.
+	 * TODO: Figure out the pipe state restore sequence.
+	 */
+	for (pipe = PIPE_A; pipe < I915_MAX_PIPES; ++ pipe) {
+		vgt_restore_state(to_vgt, pipe);
+		if (DISPLAY_PLANE_ENABLE & __vreg(to_vgt, VGT_DSPCNTR(pipe))) {
+			set_panel_fitting(to_vgt, pipe);
+		}
+	}
+}
+
 /*
  * Do foreground vm switch.
  */
 void do_vgt_fast_display_switch(struct pgt_device *pdev)
 {
 	struct vgt_device *to_vgt = pdev->next_foreground_vm;
-	enum pipe pipe;
 
 	vgt_dbg(VGT_DBG_DPY, "vGT: doing display switch: from %p to %p\n",
 			current_foreground_vm(pdev), to_vgt);
@@ -127,12 +190,10 @@ void do_vgt_fast_display_switch(struct pgt_device *pdev)
 	ASSERT(fastpath_dpy_switch);
 	ASSERT(spin_is_locked(&pdev->lock));
 
-	for (pipe = PIPE_A; pipe < I915_MAX_PIPES; ++ pipe) {
-		vgt_restore_state(to_vgt, pipe);
-		if (DISPLAY_PLANE_ENABLE & __vreg(to_vgt, VGT_DSPCNTR(pipe))) {
-			set_panel_fitting(to_vgt, pipe);
-		}
-	}
+	if (IS_SKLPLUS(pdev))
+		skl_do_vgt_fast_display_switch(pdev);
+	else
+		legacy_do_vgt_fast_display_switch(pdev);
 
 	current_foreground_vm(pdev) = to_vgt;
 }
-- 
1.7.10.4

