From 9cc62960d6423d219de3d1fd6e17fad94d865e52 Mon Sep 17 00:00:00 2001
From: Zhi Wang <zhi.a.wang@intel.com>
Date: Mon, 30 Mar 2015 12:23:53 -0400
Subject: [PATCH 029/403] vgt: handling modifying DE_RRMR via LRI
 instructions.

This patch can fix bug #742.

Signed-off-by: Zhi Wang <zhi.a.wang@intel.com>
---
 drivers/gpu/drm/i915/vgt/cmd_parser.c |   67 +++++++++++++++++++++++++++++++--
 drivers/gpu/drm/i915/vgt/handlers.c   |    6 +--
 drivers/gpu/drm/i915/vgt/vgt.h        |    3 ++
 3 files changed, 69 insertions(+), 7 deletions(-)

diff --git a/drivers/gpu/drm/i915/vgt/cmd_parser.c b/drivers/gpu/drm/i915/vgt/cmd_parser.c
index c8542f5..41c2465 100644
--- a/drivers/gpu/drm/i915/vgt/cmd_parser.c
+++ b/drivers/gpu/drm/i915/vgt/cmd_parser.c
@@ -665,6 +665,57 @@ static int vgt_cmd_handler_mi_set_context(struct parser_exec_state* s)
 	return 0;
 }
 
+/*
+ * Actually, we don't like to emulate register behavior in LRI handlers,
+ * But DE_RRMR is an exception, even we can modify i915 to access
+ * DE_RRMR via MMIO, the 2D driver will also access it via submitted
+ * batch buffer.
+ *
+ * So we have no choice and have to handle it here, as windows is
+ * using deferred filp from gen8+, MI_DISPLAY_FLIP and MI_WAIT_FOR_EVENT
+ * will not be in the same submission. If a i915 submission modify
+ * DE_RRMR after the filp submission, the wait submission of windows
+ * will hang as the needed events are disabled by i915. Only modify i915
+ * will not work, as 2D driver(xf86-video-intel) also modify it directly.
+ * */
+
+#define BIT_RANGE_MASK(a, b)	\
+	((1UL << ((a) + 1)) - (1UL << (b)))
+
+static int vgt_cmd_handler_lri_de_rrmr(struct parser_exec_state *s)
+{
+	int i;
+	int cmd_len = cmd_length(s);
+	unsigned long offset;
+	unsigned long val;
+
+	for (i = 1; i < cmd_len; i += 2) {
+		offset = cmd_val(s, i) & BIT_RANGE_MASK(22, 2);
+		val = cmd_val(s, i + 1);
+
+		if (offset == _REG_DE_RRMR)
+			break;
+	}
+
+	if (i == cmd_len) {
+		vgt_err("No DE_RRMR in LRI?");
+		return -EINVAL;
+	}
+
+	if (!vgt_rrmr_mmio_write(s->vgt, _REG_DE_RRMR, &val, 4)) {
+		vgt_err("fail to emulate register DE_RRMR!\n");
+		return -EINVAL;
+	}
+
+	if (add_patch_entry(s, cmd_ptr(s, i + 1),
+				VGT_MMIO_READ(s->vgt->pdev, _REG_DE_RRMR))) {
+		vgt_err("fail to patch DE_RRMR LRI.\n");
+		return -ENOSPC;
+	}
+
+	return 0;
+}
+
 static int cmd_reg_handler(struct parser_exec_state *s,
 	unsigned int offset, unsigned int index, char *cmd)
 {
@@ -706,16 +757,24 @@ reg_handle:
 
 	return 0;
 }
-#define BIT_RANGE_MASK(a, b)	\
-	((1UL << ((a) + 1)) - (1UL << (b)))
+
 static int vgt_cmd_handler_lri(struct parser_exec_state *s)
 {
+	unsigned long offset;
 	int i, rc = 0;
 	int cmd_len = cmd_length(s);
 
 	for (i = 1; i < cmd_len; i += 2) {
-		rc |= cmd_reg_handler(s,
-			cmd_val(s, i) & BIT_RANGE_MASK(22, 2), i, "lri");
+		offset = cmd_val(s, i) & BIT_RANGE_MASK(22, 2);
+		rc |= cmd_reg_handler(s, offset, i, "lri");
+
+		if (IS_BDW(s->vgt->pdev) && offset == _REG_DE_RRMR) {
+			rc = add_post_handle_entry(s, vgt_cmd_handler_lri_de_rrmr);
+			if (rc) {
+				vgt_err("fail to allocate post handle");
+				break;
+			}
+		}
 	}
 
 	return rc;
diff --git a/drivers/gpu/drm/i915/vgt/handlers.c b/drivers/gpu/drm/i915/vgt/handlers.c
index 61f573a..0f91755 100644
--- a/drivers/gpu/drm/i915/vgt/handlers.c
+++ b/drivers/gpu/drm/i915/vgt/handlers.c
@@ -354,7 +354,7 @@ static bool gen6_gdrst_mmio_read(struct vgt_device *vgt, unsigned int offset,
 	return true;
 }
 
-static bool rrmr_mmio_write(struct vgt_device *vgt, unsigned int offset,
+bool vgt_rrmr_mmio_write(struct vgt_device *vgt, unsigned int offset,
 	void *p_data, unsigned int bytes)
 {
 	uint32_t old_rrmr, new_rrmr, new_physical_rrmr;
@@ -370,7 +370,7 @@ static bool rrmr_mmio_write(struct vgt_device *vgt, unsigned int offset,
 		VGT_MMIO_WRITE(pdev, offset, new_physical_rrmr);
 	}
 
-	vgt_info("RRMR: VM%d: old (%x), new (%x), new_physical (%x)\n",
+	vgt_dbg(VGT_DBG_DPY, "RRMR: VM%d: old (%x), new (%x), new_physical (%x)\n",
 		vgt->vm_id, old_rrmr, new_rrmr, new_physical_rrmr);
 	return true;
 }
@@ -2704,7 +2704,7 @@ reg_attr_t vgt_base_reg_info[] = {
 {0x42080, 4, F_DOM0, 0, D_HSW_PLUS, NULL, NULL},
 {0xc4040, 4, F_VIRT, 0, D_ALL, NULL, NULL},
 
-{_REG_DE_RRMR, 4, F_VIRT, 0, D_ALL, NULL, rrmr_mmio_write},
+{_REG_DE_RRMR, 4, F_VIRT, 0, D_ALL, NULL, vgt_rrmr_mmio_write},
 
 {_REG_PIPEADSL, 4, F_DPY, 0, D_ALL, pipe_dsl_mmio_read, NULL},
 {_REG_PIPEACONF, 4, F_DPY, 0, D_ALL, NULL, pipe_conf_mmio_write},
diff --git a/drivers/gpu/drm/i915/vgt/vgt.h b/drivers/gpu/drm/i915/vgt/vgt.h
index 147b479..96c1efa 100644
--- a/drivers/gpu/drm/i915/vgt/vgt.h
+++ b/drivers/gpu/drm/i915/vgt/vgt.h
@@ -2636,6 +2636,9 @@ void vgt_irq_exit(struct pgt_device *pgt);
 
 void vgt_inject_flip_done(struct vgt_device *vgt, enum vgt_pipe pipe);
 
+bool vgt_rrmr_mmio_write(struct vgt_device *vgt, unsigned int offset,
+        void *p_data, unsigned int bytes);
+
 void vgt_trigger_virtual_event(struct vgt_device *vgt,
 	enum vgt_event_type event);
 
-- 
1.7.10.4

