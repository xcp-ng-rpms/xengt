From 78d0ebeb4e24645eda57c2afafda6219e0ae1e15 Mon Sep 17 00:00:00 2001
From: Zhiyuan Lv <zhiyuan.lv@intel.com>
Date: Sun, 26 Jul 2015 05:13:08 +0800
Subject: [PATCH 147/403] Introduce mmio.h

No functional changes.

Signed-off-by: Zhiyuan Lv <zhiyuan.lv@intel.com>
---
 drivers/gpu/drm/i915/vgt/mmio.h |  160 +++++++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/vgt/vgt.h  |  128 +------------------------------
 2 files changed, 161 insertions(+), 127 deletions(-)
 create mode 100644 drivers/gpu/drm/i915/vgt/mmio.h

diff --git a/drivers/gpu/drm/i915/vgt/mmio.h b/drivers/gpu/drm/i915/vgt/mmio.h
new file mode 100644
index 0000000..2e36d68
--- /dev/null
+++ b/drivers/gpu/drm/i915/vgt/mmio.h
@@ -0,0 +1,160 @@
+/*
+ * vGT mmio header
+ *
+ * Copyright(c) 2011-2013 Intel Corporation. All rights reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef _VGT_MMIO_H_
+#define _VGT_MMIO_H_
+
+/*
+ * Below are some wrappers for commonly used policy flags.
+ * Add on demand to feed your requirement
+ */
+/* virtualized */
+#define F_VIRT			VGT_OT_NONE | VGT_REG_VIRT
+
+/*
+ * config context (global setting, pm, workaround, etc.)
+ * 	- config owner access pReg
+ *      - non-config owner access vReg
+ * (dom0 is the unique config owner)
+ */
+#define F_DOM0			VGT_OT_CONFIG
+
+/*
+ * render context
+ *	- render owner access pReg
+ *	- non-render owner access vReg
+ */
+#define F_RDR			VGT_OT_RENDER
+/* render context, require address fix */
+#define F_RDR_ADRFIX		F_RDR | VGT_REG_ADDR_FIX
+/* render context, status updated by hw */
+#define F_RDR_HWSTS		F_RDR | VGT_REG_HW_STATUS
+/* render context, mode register (high 16 bits as write mask) */
+#define F_RDR_MODE		F_RDR | VGT_REG_MODE_CTL
+/*
+ * display context
+ *	- display owner access pReg
+ *	- non-display owner access vReg
+ */
+#define F_DPY			VGT_OT_DISPLAY
+/* display context, require address fix */
+#define F_DPY_ADRFIX		F_DPY | VGT_REG_ADDR_FIX
+/* display context, require address fix, status updated by hw */
+#define F_DPY_HWSTS_ADRFIX	F_DPY_ADRFIX | VGT_REG_HW_STATUS
+
+/*
+ * passthrough reg (DANGEROUS!)
+ *	- any VM directly access pReg
+ *	- no save/restore
+ *	- dangerous as a workaround only
+ */
+#define F_PT			VGT_OT_NONE | VGT_REG_PASSTHROUGH
+
+struct vgt_device;
+
+typedef bool (*vgt_mmio_read)(struct vgt_device *vgt, unsigned int offset,
+	void *p_data, unsigned int bytes);
+typedef bool (*vgt_mmio_write)(struct vgt_device *vgt, unsigned int offset,
+	void *p_data, unsigned int bytes);
+
+struct vgt_mmio_entry {
+	struct hlist_node hlist;
+	unsigned int base;
+	unsigned int align_bytes;
+	vgt_mmio_read	read;
+	vgt_mmio_write	write;
+};
+
+enum vgt_owner_type {
+	VGT_OT_NONE = 0,		// No owner type
+	VGT_OT_RENDER,			// the owner directly operating all render buffers (render/blit/video)
+	VGT_OT_DISPLAY,			// the owner having its content directly shown on one or several displays
+	VGT_OT_CONFIG,			// the owner is always dom0 (PM, workarounds, etc.)
+	VGT_OT_MAX,
+};
+
+/* owner type of the reg, up to 16 owner type */
+#define VGT_REG_OWNER		(0xF)
+/*
+ * TODO:
+ * Allows pReg access from any VM but w/o save/restore,
+ * since we don't know the actual bit detail or virtualization
+ * policy yet. the examples include many workaround registers.
+ * regs marked with this flag should be cleared before final
+ * release, since this way is unsafe.
+ */
+#define VGT_REG_PASSTHROUGH	(1 << 4)
+/* reg contains address, requiring fix */
+#define VGT_REG_ADDR_FIX	(1 << 5)
+/* Status bit updated from HW */
+#define VGT_REG_HW_STATUS	(1 << 6)
+/* Virtualized */
+#define VGT_REG_VIRT		(1 << 7)
+/* Mode ctl registers with high 16 bits as the mask bits */
+#define VGT_REG_MODE_CTL	(1 << 8)
+/* VMs have different settings on this reg */
+#define VGT_REG_NEED_SWITCH	(1 << 9)
+/* This reg has been tracked in vgt_base_reg_info */
+#define VGT_REG_TRACKED		(1 << 10)
+/* This reg has been accessed by a VM */
+#define VGT_REG_ACCESSED	(1 << 11)
+/* This reg is saved/restored at context switch time */
+#define VGT_REG_SAVED		(1 << 12)
+/* Policies not impacted by the superowner mode */
+#define VGT_REG_STICKY		(1 << 13)
+/* Accessed through GPU commands */
+#define VGT_REG_CMD_ACCESS	(1 << 14)
+/* index into another auxillary table. Maximum 256 entries now */
+#define VGT_REG_INDEX_SHIFT	16
+#define VGT_REG_INDEX_MASK	(0xFFFF << VGT_REG_INDEX_SHIFT)
+
+#define VGT_AUX_TABLE_NUM	256
+/* suppose a reg won't set both bits */
+typedef union {
+	struct {
+		vgt_reg_t mask;
+	} mode_ctl;
+	struct {
+		vgt_reg_t mask;
+		uint32_t  size;
+	} addr_fix;
+} vgt_aux_entry_t;
+
+typedef struct {
+	u32			reg;
+	int			size;
+	u32			flags;
+	vgt_reg_t		addr_mask;
+	int			device;
+	vgt_mmio_read		read;
+	vgt_mmio_write		write;
+} reg_attr_t;
+
+typedef struct {
+	u32			reg;
+	int			size;
+} reg_list_t;
+
+#endif /* _VGT_MMIO_H_ */
diff --git a/drivers/gpu/drm/i915/vgt/vgt.h b/drivers/gpu/drm/i915/vgt/vgt.h
index b19c0f7..d0e2ecc 100644
--- a/drivers/gpu/drm/i915/vgt/vgt.h
+++ b/drivers/gpu/drm/i915/vgt/vgt.h
@@ -52,6 +52,7 @@ struct vgt_device;
 #include "execlists.h"
 #include "gtt.h"
 #include "interrupt.h"
+#include "mmio.h"
 
 extern struct vgt_device *vgt_dom0;
 extern struct pgt_device *perf_pgt;
@@ -293,18 +294,6 @@ typedef struct {
 	((vgt)->rb[ring_id].execlist_slots[slot_idx].el_ctxs[ctx_idx])
 
 struct vgt_device;
-typedef bool (*vgt_mmio_read)(struct vgt_device *vgt, unsigned int offset,
-	void *p_data, unsigned int bytes);
-typedef bool (*vgt_mmio_write)(struct vgt_device *vgt, unsigned int offset,
-	void *p_data, unsigned int bytes);
-
-struct vgt_mmio_entry {
-	struct hlist_node hlist;
-	unsigned int base;
-	unsigned int align_bytes;
-	vgt_mmio_read	read;
-	vgt_mmio_write	write;
-};
 
 /*
  * Ring ID definition.
@@ -552,62 +541,8 @@ struct vgt_device {
 	unsigned long last_reset_time;
 };
 
-enum vgt_owner_type {
-	VGT_OT_NONE = 0,		// No owner type
-	VGT_OT_RENDER,			// the owner directly operating all render buffers (render/blit/video)
-	VGT_OT_DISPLAY,			// the owner having its content directly shown on one or several displays
-	VGT_OT_CONFIG,			// the owner is always dom0 (PM, workarounds, etc.)
-	VGT_OT_MAX,
-};
-
-/* owner type of the reg, up to 16 owner type */
-#define VGT_REG_OWNER		(0xF)
-/*
- * TODO:
- * Allows pReg access from any VM but w/o save/restore,
- * since we don't know the actual bit detail or virtualization
- * policy yet. the examples include many workaround registers.
- * regs marked with this flag should be cleared before final
- * release, since this way is unsafe.
- */
-#define VGT_REG_PASSTHROUGH	(1 << 4)
-/* reg contains address, requiring fix */
-#define VGT_REG_ADDR_FIX	(1 << 5)
-/* Status bit updated from HW */
-#define VGT_REG_HW_STATUS	(1 << 6)
-/* Virtualized */
-#define VGT_REG_VIRT		(1 << 7)
-/* Mode ctl registers with high 16 bits as the mask bits */
-#define VGT_REG_MODE_CTL	(1 << 8)
-/* VMs have different settings on this reg */
-#define VGT_REG_NEED_SWITCH	(1 << 9)
-/* This reg has been tracked in vgt_base_reg_info */
-#define VGT_REG_TRACKED		(1 << 10)
-/* This reg has been accessed by a VM */
-#define VGT_REG_ACCESSED	(1 << 11)
-/* This reg is saved/restored at context switch time */
-#define VGT_REG_SAVED		(1 << 12)
-/* Policies not impacted by the superowner mode */
-#define VGT_REG_STICKY		(1 << 13)
-/* Accessed through GPU commands */
-#define VGT_REG_CMD_ACCESS	(1 << 14)
-/* index into another auxillary table. Maximum 256 entries now */
-#define VGT_REG_INDEX_SHIFT	16
-#define VGT_REG_INDEX_MASK	(0xFFFF << VGT_REG_INDEX_SHIFT)
 typedef u32 reg_info_t;
 
-#define VGT_AUX_TABLE_NUM	256
-/* suppose a reg won't set both bits */
-typedef union {
-	struct {
-		vgt_reg_t mask;
-	} mode_ctl;
-	struct {
-		vgt_reg_t mask;
-		uint32_t  size;
-	} addr_fix;
-} vgt_aux_entry_t;
-
 struct vgt_irq_host_state;
 
 enum vgt_trace_type {
@@ -1051,21 +986,6 @@ static inline bool reg_hw_access(struct vgt_device *vgt, unsigned int reg)
 
 #define D_ALL		(D_SNB | D_IVB | D_HSW | D_BDW)
 
-typedef struct {
-	u32			reg;
-	int			size;
-	u32			flags;
-	vgt_reg_t		addr_mask;
-	int			device;
-	vgt_mmio_read		read;
-	vgt_mmio_write		write;
-} reg_attr_t;
-
-typedef struct {
-	u32			reg;
-	int			size;
-} reg_list_t;
-
 /*
  * Comments copied from i915 driver - i915_reg.h :
  * Haswell does have the CXT_SIZE register however it does not appear to be
@@ -1158,52 +1078,6 @@ static inline int tail_to_ring_id(struct pgt_device *pdev, unsigned int tail_off
 	return 0;
 }
 
-/*
- * Below are some wrappers for commonly used policy flags.
- * Add on demand to feed your requirement
- */
-/* virtualized */
-#define F_VIRT			VGT_OT_NONE | VGT_REG_VIRT
-
-/*
- * config context (global setting, pm, workaround, etc.)
- * 	- config owner access pReg
- *      - non-config owner access vReg
- * (dom0 is the unique config owner)
- */
-#define F_DOM0			VGT_OT_CONFIG
-
-/*
- * render context
- *	- render owner access pReg
- *	- non-render owner access vReg
- */
-#define F_RDR			VGT_OT_RENDER
-/* render context, require address fix */
-#define F_RDR_ADRFIX		F_RDR | VGT_REG_ADDR_FIX
-/* render context, status updated by hw */
-#define F_RDR_HWSTS		F_RDR | VGT_REG_HW_STATUS
-/* render context, mode register (high 16 bits as write mask) */
-#define F_RDR_MODE		F_RDR | VGT_REG_MODE_CTL
-/*
- * display context
- *	- display owner access pReg
- *	- non-display owner access vReg
- */
-#define F_DPY			VGT_OT_DISPLAY
-/* display context, require address fix */
-#define F_DPY_ADRFIX		F_DPY | VGT_REG_ADDR_FIX
-/* display context, require address fix, status updated by hw */
-#define F_DPY_HWSTS_ADRFIX	F_DPY_ADRFIX | VGT_REG_HW_STATUS
-
-/*
- * passthrough reg (DANGEROUS!)
- *	- any VM directly access pReg
- *	- no save/restore
- *	- dangerous as a workaround only
- */
-#define F_PT			VGT_OT_NONE | VGT_REG_PASSTHROUGH
-
 extern int vgt_ctx_switch;
 extern bool vgt_validate_ctx_switch;
 extern bool fastpath_dpy_switch;
-- 
1.7.10.4

