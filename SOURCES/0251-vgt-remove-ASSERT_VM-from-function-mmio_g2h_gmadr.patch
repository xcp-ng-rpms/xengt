From 004c1d8049abc0e035702d2896376ba90503d10b Mon Sep 17 00:00:00 2001
From: Yi Sun <yi.sun@intel.com>
Date: Tue, 22 Sep 2015 16:45:56 +0800
Subject: [PATCH 251/403] vgt: remove ASSERT_VM from function mmio_g2h_gmadr

Change mmio_g2h_gmadr's return value with error code and its invocation.

v5. Check vgt_surf_base_range_check's return value in each caller.
    Code clean a little bit in function default_mmio_write.
    change h_gmadr to h_value which is more accurate.

v4. Fix some coding style issue.

v3. Use vgt->vgt_id instead of vm_id in error message.
    Change mmio_g2h_gmadr's return type from vgt_reg_t to int.
    Change vgt_surf_base_range_check's return type from vgt_reg_t to int.

v2. Remove some useless modification.
    Use (ret < 0) to check whether a function return correctly or not.

Signed-off-by: Yi Sun <yi.sun@intel.com>

Conflicts:
	drivers/gpu/drm/i915/vgt/handlers.c
	drivers/gpu/drm/i915/vgt/render.c
---
 drivers/gpu/drm/i915/vgt/aperture_gm.c       |   33 +++++++++-------
 drivers/gpu/drm/i915/vgt/handlers.c          |   53 +++++++++++++++++---------
 drivers/gpu/drm/i915/vgt/legacy/render_hsw.c |    8 +++-
 drivers/gpu/drm/i915/vgt/mmio.c              |   41 ++++++++++++++++----
 drivers/gpu/drm/i915/vgt/vgt.h               |    3 +-
 5 files changed, 95 insertions(+), 43 deletions(-)

diff --git a/drivers/gpu/drm/i915/vgt/aperture_gm.c b/drivers/gpu/drm/i915/vgt/aperture_gm.c
index 7b1a3d8..77d609a 100644
--- a/drivers/gpu/drm/i915/vgt/aperture_gm.c
+++ b/drivers/gpu/drm/i915/vgt/aperture_gm.c
@@ -31,16 +31,19 @@
  *
  * handle in 4 bytes granule
  */
-vgt_reg_t mmio_g2h_gmadr(struct vgt_device *vgt, unsigned long reg, vgt_reg_t g_value)
+int mmio_g2h_gmadr(struct vgt_device *vgt, unsigned long reg,
+		vgt_reg_t g_value, vgt_reg_t *h_value)
 {
 	struct pgt_device *pdev = vgt->pdev;
-	uint64_t h_value;
+	uint64_t h_val;
 	vgt_reg_t mask;
 	uint32_t size;
-	int ret;
+	int ret = 0;
 
-	if (!reg_addr_fix(pdev, reg))
-		return g_value;
+	if (!reg_addr_fix(pdev, reg)) {
+		*h_value = g_value;
+		return 0;
+	}
 
 	ASSERT((reg < _REG_FENCE_0_LOW) || (reg >= _REG_FENCE_0_LOW + VGT_FENCE_REGION_SIZE));
 
@@ -59,18 +62,20 @@ vgt_reg_t mmio_g2h_gmadr(struct vgt_device *vgt, unsigned long reg, vgt_reg_t g_
 			  (g_value & ~mask);
 	}
 
-	h_value = g_value & mask;
+	h_val = g_value & mask;
 	size = reg_aux_addr_size(pdev, reg);
-	ret = g2h_gm_range(vgt, &h_value, size);
+	ret = g2h_gm_range(vgt, &h_val, size);
+	if (ret < 0) {
+		vgt_err("vGT(%d): Failed to convert guest graphics memory address: g_value(0x%x), size(0x%x)\n",
+				vgt->vgt_id, g_value, size);
 
-	/*
-	 *  Note: ASSERT_VM should be placed outside, e.g. after lock is released in
-	 *  vgt_emulate_write(). Will fix this later.
-	 */
-	ASSERT_VM(!ret, vgt);
-	vgt_dbg(VGT_DBG_MEM, "....(g)%x->(h)%llx\n", g_value, (h_value & mask) | (g_value & ~mask));
+		return ret;
+	}
+
+	vgt_dbg(VGT_DBG_MEM, "....(g)%x->(h)%llx\n", g_value, (h_val & mask) | (g_value & ~mask));
 
-	return (h_value & mask) | (g_value & ~mask);
+	*h_value =  (h_val & mask) | (g_value & ~mask);
+	return 0;
 }
 
 /*
diff --git a/drivers/gpu/drm/i915/vgt/handlers.c b/drivers/gpu/drm/i915/vgt/handlers.c
index 34c32bc..2ec9f3b 100644
--- a/drivers/gpu/drm/i915/vgt/handlers.c
+++ b/drivers/gpu/drm/i915/vgt/handlers.c
@@ -653,7 +653,12 @@ static bool pp_dir_base_write(struct vgt_device *vgt, unsigned int off,
 	 * it turns out to be ((((base >> 16) * 64) >> 2) << PAGE_SHIFT), which
 	 * is just base. */
 	v_info->base = base;
-	s_info->base = mmio_g2h_gmadr(vgt, off, v_info->base);
+	if (mmio_g2h_gmadr(vgt, off, v_info->base, &(s_info->base)) < 0) {
+		vgt_err("vGT(%d): Fail to conver graphics memory(0x%x), with value(%x)\n",
+				vgt->vgt_id, off, v_info->base);
+		return false;
+	}
+
 	__vreg(vgt, off) = base;
 	__sreg(vgt, off) = s_info->base;
 
@@ -774,11 +779,10 @@ extern int vgt_decode_cursor_plane_format(struct vgt_device *vgt,
 extern int vgt_decode_sprite_plane_format(struct vgt_device *vgt,
 	int pipe, struct vgt_sprite_plane_format *plane);
 
-vgt_reg_t vgt_surf_base_range_check (struct vgt_device *vgt,
-	enum pipe pipe, enum vgt_plane_type plane)
+int vgt_surf_base_range_check(struct vgt_device *vgt,
+	enum pipe pipe, enum vgt_plane_type plane, vgt_reg_t *surf_base)
 {
 	uint32_t  reg = _REG_INVALID;
-	vgt_reg_t surf_base = 0;
 	uint32_t  range;
 	struct vgt_primary_plane_format primary_plane;
 	struct vgt_sprite_plane_format  sprite_plane;
@@ -791,6 +795,7 @@ vgt_reg_t vgt_surf_base_range_check (struct vgt_device *vgt,
 		return surf_base;
 
 	if (!vgt_has_pipe_enabled(vgt, pipe)) {
+		*surf_base = 0;
 		return 0;
 	}
 
@@ -828,10 +833,10 @@ vgt_reg_t vgt_surf_base_range_check (struct vgt_device *vgt,
 
 	if (reg != _REG_INVALID){
 		reg_aux_addr_size(vgt->pdev, reg) = range;
-		surf_base = mmio_g2h_gmadr (vgt, reg, __vreg(vgt, reg));
+		return mmio_g2h_gmadr(vgt, reg, __vreg(vgt, reg) , surf_base);
 	}
 
-	return surf_base;
+	return 0;
 }
 
 static bool pipe_conf_mmio_write(struct vgt_device *vgt, unsigned int offset,
@@ -842,6 +847,7 @@ static bool pipe_conf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 	enum pipe pipe;
 	enum vgt_plane_type plane;
 	uint32_t wr_data;
+	vgt_reg_t ret_val;
 
 	reg = offset & ~(bytes - 1);
 
@@ -878,7 +884,7 @@ static bool pipe_conf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 		}
 
 		for (plane = PRIMARY_PLANE; plane < MAX_PLANE; plane++) {
-			vgt_surf_base_range_check(vgt, pipe, plane);
+			rc &= !vgt_surf_base_range_check(vgt, pipe, plane, &ret_val);
 		}
 	}
 
@@ -1309,7 +1315,9 @@ static bool dpy_plane_ctl_write(struct vgt_device *vgt, unsigned int offset,
 	vgt_reg_t new_plane_ctl;
 	bool enable_plane = false;
 	struct vgt_device *foreground_vgt;
+	vgt_reg_t ret_val;
 	int i;
+	bool rc = true;
 
 	new_plane_ctl = *(vgt_reg_t *)p_data;
 	pipe = VGT_DSPCNTRPIPE(offset);
@@ -1334,10 +1342,10 @@ static bool dpy_plane_ctl_write(struct vgt_device *vgt, unsigned int offset,
 				set_panel_fitting(foreground_vgt, v_pipe);
 			}
 		}
-		vgt_surf_base_range_check(vgt, pipe, PRIMARY_PLANE);
+		rc &= !vgt_surf_base_range_check(vgt, pipe, PRIMARY_PLANE, &ret_val);
 	}
 
-	return true;
+	return rc;
 }
 
 
@@ -1348,9 +1356,10 @@ static bool pri_surf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 	enum pipe pipe = VGT_DSPSURFPIPE(offset);
 	unsigned int real_offset;
 	vgt_reg_t ret_val;
+	bool rc = true;
 
 	__vreg(vgt, offset) = *(vgt_reg_t*)p_data;
-	ret_val = vgt_surf_base_range_check(vgt, pipe, PRIMARY_PLANE);
+	rc &= !vgt_surf_base_range_check(vgt, pipe, PRIMARY_PLANE, &ret_val);
 	__sreg(vgt, offset) = ret_val ? ret_val : __vreg(vgt, offset);
 
 	__vreg(vgt, VGT_PIPE_FLIPCOUNT(pipe))++;
@@ -1367,18 +1376,20 @@ static bool pri_surf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 
 	vgt_inject_flip_done(vgt, VGT_DSPSURFPIPE(offset));
 
-	return true;
+	return rc;
 }
 
 static bool sprite_plane_ctl_write(struct vgt_device *vgt, unsigned int offset,
 	void *p_data, unsigned int bytes)
 {
 	enum pipe pipe = VGT_SPRCNTRPIPE(offset);
+	vgt_reg_t ret_val;
+	bool rc = true;
 
 	dpy_plane_mmio_write(vgt, offset, p_data, bytes);
-	vgt_surf_base_range_check(vgt, pipe, SPRITE_PLANE);
+	rc &= !vgt_surf_base_range_check(vgt, pipe, SPRITE_PLANE, &ret_val);
 
-	return true;
+	return rc;
 }
 
 static bool spr_surf_mmio_write(struct vgt_device *vgt, unsigned int offset,
@@ -1388,9 +1399,10 @@ static bool spr_surf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 	enum pipe pipe = VGT_SPRSURFPIPE(offset);
 	unsigned int real_offset;
 	vgt_reg_t ret_val;
+	bool rc = true;
 
 	__vreg(vgt, offset) = *(vgt_reg_t*)p_data;
-	ret_val = vgt_surf_base_range_check(vgt, pipe, SPRITE_PLANE);
+	rc &= !vgt_surf_base_range_check(vgt, pipe, SPRITE_PLANE, &ret_val);
 	__sreg(vgt, offset) = ret_val ? ret_val : __vreg(vgt, offset);
 
 	if (current_foreground_vm(vgt->pdev) == vgt &&
@@ -1403,18 +1415,20 @@ static bool spr_surf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 	msg.pipe_id = VGT_SPRSURFPIPE(offset);
 	vgt_fb_notifier_call_chain(FB_DISPLAY_FLIP, &msg);
 
-	return true;
+	return rc;
 }
 
 static bool cur_plane_ctl_write(struct vgt_device *vgt, unsigned int offset,
 	void *p_data, unsigned int bytes)
 {
 	enum pipe pipe = VGT_CURCNTRPIPE(offset);
+	vgt_reg_t ret_val;
+	bool rc = true;
 
 	dpy_plane_mmio_write(vgt,offset, p_data, bytes);
-	vgt_surf_base_range_check(vgt, pipe, CURSOR_PLANE);
+	rc &= !vgt_surf_base_range_check(vgt, pipe, CURSOR_PLANE, &ret_val);
 
-	return true;
+	return rc;
 }
 
 static bool cur_surf_mmio_write(struct vgt_device *vgt, unsigned int offset,
@@ -1423,9 +1437,10 @@ static bool cur_surf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 	enum pipe pipe = VGT_CURSURFPIPE(offset);
 	unsigned int real_offset;
 	vgt_reg_t ret_val;
+	bool rc = true;
 
 	__vreg(vgt, offset) = *(vgt_reg_t*)p_data;
-	ret_val = vgt_surf_base_range_check(vgt, pipe, CURSOR_PLANE);
+	rc &= !vgt_surf_base_range_check(vgt, pipe, CURSOR_PLANE, &ret_val);
 	__sreg(vgt, offset) = ret_val ? ret_val : __vreg(vgt, offset);
 
 	if (current_foreground_vm(vgt->pdev) == vgt &&
@@ -1433,7 +1448,7 @@ static bool cur_surf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 		VGT_MMIO_WRITE(vgt->pdev, real_offset, __sreg(vgt, offset));
 	}
 
-	return true;
+	return rc;
 }
 
 static bool dpy_modeset_mmio_write(struct vgt_device *vgt, unsigned int offset,
diff --git a/drivers/gpu/drm/i915/vgt/legacy/render_hsw.c b/drivers/gpu/drm/i915/vgt/legacy/render_hsw.c
index 6338c89..2905d11 100644
--- a/drivers/gpu/drm/i915/vgt/legacy/render_hsw.c
+++ b/drivers/gpu/drm/i915/vgt/legacy/render_hsw.c
@@ -1265,7 +1265,13 @@ bool ring_mmio_write_in_rb_mode(struct vgt_device *vgt, unsigned int off,
 		sring->head = vring->head;
 		break;
 	case RB_OFFSET_START:
-		sring->start = mmio_g2h_gmadr(vgt, off, vring->start);
+		if (mmio_g2h_gmadr(vgt, off,
+					vring->start, &(sring->start)) < 0) {
+			vgt_err("vGT(%d): Failed to convert guest ring_buffer "
+				"start(0x%x) with value(%x)\n",
+				vgt->vgt_id, off, vring->start);
+			return false;
+		}
 		break;
 	case RB_OFFSET_CTL:
 		sring->ctl = vring->ctl;
diff --git a/drivers/gpu/drm/i915/vgt/mmio.c b/drivers/gpu/drm/i915/vgt/mmio.c
index 77a0b41..2ed1186 100644
--- a/drivers/gpu/drm/i915/vgt/mmio.c
+++ b/drivers/gpu/drm/i915/vgt/mmio.c
@@ -166,29 +166,53 @@ static unsigned long vgt_get_reg_64(struct vgt_device *vgt, unsigned int reg)
 		return __vreg64(vgt, reg);
 }
 
-static void vgt_update_reg(struct vgt_device *vgt, unsigned int reg)
+static int vgt_update_reg(struct vgt_device *vgt, unsigned int reg)
 {
 	struct pgt_device *pdev = vgt->pdev;
+	int ret = 0;
 	/*
 	 * update sreg if pass through;
 	 * update preg if boot_time or vgt is reg's cur owner
 	 */
-	__sreg(vgt, reg) = mmio_g2h_gmadr(vgt, reg, __vreg(vgt, reg));
+	ret = mmio_g2h_gmadr(vgt, reg, __vreg(vgt, reg), vgt_sreg(vgt, reg));
+	if (ret < 0) {
+		vgt_err("vGT(%d): Failed to update reg(0x%x), vreg(0x%x)\n",
+				vgt->vgt_id, reg, __vreg(vgt, reg));
+		return ret;
+	}
+
 	if (reg_hw_access(vgt, reg))
 		VGT_MMIO_WRITE(pdev, reg, __sreg(vgt, reg));
+
+	return 0;
 }
 
-static void vgt_update_reg_64(struct vgt_device *vgt, unsigned int reg)
+static int vgt_update_reg_64(struct vgt_device *vgt, unsigned int reg)
 {
 	struct pgt_device *pdev = vgt->pdev;
+	int ret = 0;
 	/*
 	 * update sreg if pass through;
 	 * update preg if boot_time or vgt is reg's cur owner
 	 */
-	__sreg(vgt, reg) = mmio_g2h_gmadr(vgt, reg, __vreg(vgt, reg));
-	__sreg(vgt, reg + 4) = mmio_g2h_gmadr(vgt, reg + 4, __vreg(vgt, reg + 4));
+	ret = mmio_g2h_gmadr(vgt, reg, __vreg(vgt, reg), vgt_sreg(vgt, reg));
+	if (ret < 0) {
+		vgt_err("vGT(%d): Failed to update low 32-bit of reg(0x%x), vreg(0x%x)\n",
+				vgt->vgt_id, reg, __vreg(vgt, reg));
+		return ret;
+	}
+
+	ret = mmio_g2h_gmadr(vgt, reg + 4,
+			__vreg(vgt, reg + 4), vgt_sreg(vgt, reg + 4));
+	if (ret < 0) {
+		vgt_err("vGT(%d): Failed to update high 32-bit of reg(0x%x), vreg(0x%x)\n",
+				vgt->vgt_id, reg+4, __vreg(vgt, reg+4));
+		return ret;
+	}
+
 	if (reg_hw_access(vgt, reg))
 			VGT_MMIO_WRITE_BYTES(pdev, reg, __sreg64(vgt, reg), 8);
+	return 0;
 }
 
 bool default_mmio_read(struct vgt_device *vgt, unsigned int offset,
@@ -212,16 +236,17 @@ bool default_mmio_read(struct vgt_device *vgt, unsigned int offset,
 bool default_mmio_write(struct vgt_device *vgt, unsigned int offset,
 	void *p_data, unsigned int bytes)
 {
+	int ret;
 	memcpy((char *)vgt->state.vReg + offset,
 			p_data, bytes);
 
 	offset &= ~(bytes - 1);
 	if (bytes <= 4)
-		vgt_update_reg(vgt, offset);
+		ret = vgt_update_reg(vgt, offset);
 	else
-		vgt_update_reg_64(vgt, offset);
+		ret = vgt_update_reg_64(vgt, offset);
 
-	return true;
+	return (ret < 0) ? false : true;
 }
 
 bool default_passthrough_mmio_read(struct vgt_device *vgt, unsigned int offset,
diff --git a/drivers/gpu/drm/i915/vgt/vgt.h b/drivers/gpu/drm/i915/vgt/vgt.h
index 34817ae..d7de772 100644
--- a/drivers/gpu/drm/i915/vgt/vgt.h
+++ b/drivers/gpu/drm/i915/vgt/vgt.h
@@ -1650,7 +1650,8 @@ void vgt_reg_watchdog_handler(struct vgt_device *state,
 extern char *vgt_irq_name[EVENT_MAX];
 ssize_t get_avl_vm_aperture_gm_and_fence(struct pgt_device *pdev, char *buf,
 		ssize_t buf_sz);
-vgt_reg_t mmio_g2h_gmadr(struct vgt_device *vgt, unsigned long reg, vgt_reg_t g_value);
+int mmio_g2h_gmadr(struct vgt_device *vgt, unsigned long reg,
+		vgt_reg_t g_value, vgt_reg_t *h_gmadr);
 vgt_reg_t mmio_h2g_gmadr(struct vgt_device *vgt, unsigned long reg, vgt_reg_t h_value);
 unsigned long rsvd_aperture_alloc(struct pgt_device *pdev, unsigned long size);
 void rsvd_aperture_free(struct pgt_device *pdev, unsigned long start, unsigned long size);
-- 
1.7.10.4

