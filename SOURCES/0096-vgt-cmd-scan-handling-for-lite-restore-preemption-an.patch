From b5269073c9fa933e1043298099b43746773f7507 Mon Sep 17 00:00:00 2001
From: "Zheng, Xiao" <xiao.zheng@intel.com>
Date: Tue, 9 Jun 2015 13:03:49 +0800
Subject: [PATCH 096/403] vgt: cmd scan handling for lite-restore preemption
 and enhance stability
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This is to fix stability issues that Guest/Dom0 TDR when hang up at instruction
MI_WAIT_FOR_EVENT.
There are lite-restore cases, that same context will be submitted again.
However we skip “cmd_scan” on these lite-restore submissions due to some corner
case. This is also a potential security hole.
The issue will occur with below condition:
1. With a busy workload in windows guest, that will triggers lite-restore ctx
2. The Guest VM was not current display owner
3. MI_WAIT_FOR_EVENT was in ctx ringbuffer

Signed-off-by: Zheng, Xiao <xiao.zheng@intel.com>
---
 drivers/gpu/drm/i915/vgt/cmd_parser.c |   17 +++++++++++++++++
 drivers/gpu/drm/i915/vgt/execlists.c  |   20 +++++++++++++++++---
 drivers/gpu/drm/i915/vgt/vgt.h        |    1 +
 3 files changed, 35 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/vgt/cmd_parser.c b/drivers/gpu/drm/i915/vgt/cmd_parser.c
index 4ba54e7..3c87eff 100644
--- a/drivers/gpu/drm/i915/vgt/cmd_parser.c
+++ b/drivers/gpu/drm/i915/vgt/cmd_parser.c
@@ -567,9 +567,26 @@ static void parser_exec_state_dump(struct parser_exec_state *s)
 	if (s->ip_va == NULL) {
 		vgt_err(" ip_va(NULL)\n");
 	} else {
+		int cnt = 0;
 		vgt_err("  ip_va=%p: %08x %08x %08x %08x \n",
 				s->ip_va, cmd_val(s, 0), cmd_val(s, 1), cmd_val(s, 2), cmd_val(s, 3));
+
 		vgt_print_opcode(cmd_val(s, 0), s->ring_id);
+
+		/* print the whole page to trace */
+		trace_printk("ERROR ip_va=%p: %08x %08x %08x %08x \n",
+				s->ip_va, cmd_val(s, 0), cmd_val(s, 1), cmd_val(s, 2), cmd_val(s, 3));
+
+		s->ip_va = (uint32_t*)((((u64)s->ip_va) >> 12) << 12);
+		while(cnt < 1024) {
+		trace_printk("DUMP ip_va=%p: %08x %08x %08x %08x %08x %08x %08x %08x \n",
+				s->ip_va, cmd_val(s, 0), cmd_val(s, 1), cmd_val(s, 2), cmd_val(s, 3),
+				          cmd_val(s, 4), cmd_val(s, 5), cmd_val(s, 6), cmd_val(s, 7));
+
+			s->ip_va+=8;
+			cnt+=8;
+		}
+
 	}
 }
 #define RING_BUF_WRAP(s, ip_gma)	(((s)->buf_type == RING_BUFFER_INSTRUCTION) && \
diff --git a/drivers/gpu/drm/i915/vgt/execlists.c b/drivers/gpu/drm/i915/vgt/execlists.c
index b000350..418af95 100644
--- a/drivers/gpu/drm/i915/vgt/execlists.c
+++ b/drivers/gpu/drm/i915/vgt/execlists.c
@@ -1411,11 +1411,25 @@ static void vgt_update_ring_info(struct vgt_device *vgt,
 	vgt->rb[ring_id].has_ppgtt_mode_enabled = 1;
 	vgt->rb[ring_id].has_ppgtt_base_set = 1;
 	vgt->rb[ring_id].request_id = el_ctx->request_id;
-	vgt->rb[ring_id].last_scan_head = el_ctx->last_scan_head;
-	if (!IS_PREEMPTION_RESUBMISSION(vring->head, vring->tail, el_ctx->last_scan_head)) {
+
+#if 0
+	/* keep this trace for debug purpose */
+	trace_printk("VRING: HEAD %04x TAIL %04x START %08x last_scan %08x PREEMPTION %d DPY %d\n",
+		vring->head, vring->tail, vring->start, el_ctx->last_scan_head,
+		IS_PREEMPTION_RESUBMISSION(vring->head, vring->tail,
+		el_ctx->last_scan_head), current_foreground_vm(vgt->pdev) == vgt);
+#endif
+	if (el_ctx->last_guest_head == vring->head) {
+		/* For lite-restore case from Guest, Headers are fixed,
+		 HW only resample tail */
 		vgt->rb[ring_id].last_scan_head = el_ctx->last_scan_head;
-		vgt_scan_vring(vgt, ring_id);
 	}
+	else {
+		vgt->rb[ring_id].last_scan_head = vring->head;
+		el_ctx->last_guest_head = vring->head;
+	}
+
+	vgt_scan_vring(vgt, ring_id);
 
 	/* the function is used to update ring/buffer only. No real submission inside */
 	vgt_submit_commands(vgt, ring_id);
diff --git a/drivers/gpu/drm/i915/vgt/vgt.h b/drivers/gpu/drm/i915/vgt/vgt.h
index d0e0505..3973706 100644
--- a/drivers/gpu/drm/i915/vgt/vgt.h
+++ b/drivers/gpu/drm/i915/vgt/vgt.h
@@ -704,6 +704,7 @@ struct execlist_context {
 	 * data and store them into vgt->rb[ring_id] before a
 	 * context is submitted. We will have better handling later.
 	 */
+	vgt_reg_t last_guest_head;
 	vgt_reg_t last_scan_head;
 	uint64_t request_id;
 	//uint64_t cmd_nr;
-- 
1.7.10.4

