From 7ca890b28f592bd1f9a79b827d1c1eb4552601dc Mon Sep 17 00:00:00 2001
From: Zhiyuan Lv <zhiyuan.lv@intel.com>
Date: Sat, 25 Jul 2015 23:32:18 +0800
Subject: [PATCH 144/403] Introduce display.h

Move related stuff into the new file. No functional changes.

Signed-off-by: Zhiyuan Lv <zhiyuan.lv@intel.com>

Conflicts:
	drivers/gpu/drm/i915/vgt/vgt.h
---
 drivers/gpu/drm/i915/vgt/display.c |    1 -
 drivers/gpu/drm/i915/vgt/display.h |  352 ++++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/vgt/reg.h     |   99 ----------
 drivers/gpu/drm/i915/vgt/vgt.h     |  221 +---------------------
 4 files changed, 357 insertions(+), 316 deletions(-)
 create mode 100644 drivers/gpu/drm/i915/vgt/display.h

diff --git a/drivers/gpu/drm/i915/vgt/display.c b/drivers/gpu/drm/i915/vgt/display.c
index a89abec..66fee28 100644
--- a/drivers/gpu/drm/i915/vgt/display.c
+++ b/drivers/gpu/drm/i915/vgt/display.c
@@ -877,7 +877,6 @@ static bool is_dp_port_type(enum vgt_port_type port_type)
 	return false;
 }
 
-
 /* copy the cached value into corresponding port field. Meanwhile,
  * Update system monitor state for EDID changes
  */
diff --git a/drivers/gpu/drm/i915/vgt/display.h b/drivers/gpu/drm/i915/vgt/display.h
new file mode 100644
index 0000000..d8fb4bd
--- /dev/null
+++ b/drivers/gpu/drm/i915/vgt/display.h
@@ -0,0 +1,352 @@
+/*
+ * vGT display header
+ *
+ * Copyright(c) 2011-2013 Intel Corporation. All rights reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef _VGT_DISPLAY_H_
+#define _VGT_DISPLAY_H_
+
+enum vgt_uevent_type;
+
+#define VGT_MAX_UEVENT_VARS 20
+
+/* DPCD start */
+#define DPCD_SIZE	0x700
+
+/* DPCD addresses */
+#define DPCD_REV			0x000
+#define DPCD_MAX_LINK_RATE		0x001
+#define DPCD_MAX_LANE_COUNT		0x002
+
+#define DPCD_TRAINING_PATTERN_SET	0x102
+#define	DPCD_SINK_COUNT			0x200
+#define DPCD_LANE0_1_STATUS		0x202
+#define DPCD_LANE2_3_STATUS		0x203
+#define DPCD_LANE_ALIGN_STATUS_UPDATED	0x204
+#define DPCD_SINK_STATUS		0x205
+
+/* link training */
+#define DPCD_TRAINING_PATTERN_SET_MASK	0x03
+#define DPCD_LINK_TRAINING_DISABLED	0x00
+#define DPCD_TRAINING_PATTERN_1		0x01
+#define DPCD_TRAINING_PATTERN_2		0x02
+
+#define DPCD_CP_READY_MASK		(1 << 6)
+
+/* lane status */
+#define DPCD_LANES_CR_DONE		0x11
+#define DPCD_LANES_EQ_DONE		0x22
+#define DPCD_SYMBOL_LOCKED		0x44
+
+#define DPCD_INTERLANE_ALIGN_DONE	0x01
+
+#define DPCD_SINK_IN_SYNC		0x03
+
+/* DPCD end */
+
+#define SBI_REG_MAX	20
+
+#define VGT_PORT_NAME(p)	\
+	((p) == PORT_A ? "PORT_A" : \
+	((p) == PORT_B ? "PORT_B" : \
+	((p) == PORT_C ? "PORT_C" : \
+	((p) == PORT_D ? "PORT_D" : \
+	((p) == PORT_E ? "PORT_E" : "PORT_X")))))
+
+#define VGT_PIPE_NAME(p)	\
+	((p) == PIPE_A ? "Pipe A" : \
+		((p) == PIPE_B ? "Pipe B" : \
+			((p) == PIPE_C ? "Pipe C" : "PIPE X")))
+#define VGT_PIPE_CHAR(p)	\
+	((p) == PIPE_A ? 'A' : \
+		((p) == PIPE_B ? 'B' : \
+			((p) == PIPE_C ? 'C' : 'X')))
+
+#define VGT_PORT_TYPE_NAME(p)	\
+        ((p) == VGT_CRT ? "VGT_CRT" : \
+        ((p) == VGT_DP_A ? "VGT_DP_A" : \
+        ((p) == VGT_DP_B ? "VGT_DP_B" : \
+        ((p) == VGT_DP_C ? "VGT_DP_C" : \
+	((p) == VGT_DP_D ? "VGT_DP_D" : \
+	((p) == VGT_HDMI_B ? "VGT_HDMI_B" : \
+	((p) == VGT_HDMI_C ? "VGT_HDMI_C" : \
+	((p) == VGT_HDMI_D ? "VGT_HDMI_D" : "UNKNOWN"))))))))
+
+#define HOTPLUG_VMID_FOR_ALL_VMS	0xff
+
+#define VGT_VBLANK_TIMEOUT	50	/* in ms */
+
+#define vgt_has_edp_enabled(vgt, pipe)							\
+		(vgt && ((pipe) >= PIPE_A) && ((pipe) < I915_MAX_PIPES) &&		\
+		(__vreg((vgt), _REG_PIPE_EDP_CONF) & _REGBIT_PIPE_ENABLE) &&		\
+		(pipe == get_edp_input(__vreg(vgt, _REG_TRANS_DDI_FUNC_CTL_EDP))))
+#define vgt_has_pipe_enabled(vgt, pipe)				\
+		(vgt && ((pipe) >= PIPE_A) && ((pipe) < I915_MAX_PIPES) &&	\
+		((__vreg((vgt), VGT_PIPECONF(pipe)) & _REGBIT_PIPE_ENABLE) ||	\
+			vgt_has_edp_enabled(vgt, pipe)))
+#define pdev_has_pipe_enabled(pdev, pipe)					\
+		(pdev && ((pipe) >= PIPE_A) && ((pipe) < I915_MAX_PIPES) &&	\
+		((__vreg(current_display_owner(pdev),				\
+			VGT_PIPECONF(pipe)) & _REGBIT_PIPE_ENABLE) ||		\
+			vgt_has_edp_enabled(current_display_owner(pdev), pipe)))
+#define dpy_is_valid_port(port)							\
+		(((port) >= PORT_A) && ((port) < I915_MAX_PORTS))
+
+#define dpy_has_monitor_on_port(vgt, port)					\
+		(vgt && dpy_is_valid_port(port) &&				\
+		vgt->ports[port].edid && vgt->ports[port].edid->data_valid)
+
+#define dpy_port_is_dp(vgt, port)						\
+		((vgt) && dpy_is_valid_port(port)				\
+		&& ((vgt->ports[port].type == VGT_DP_A) ||			\
+		    (vgt->ports[port].type == VGT_DP_B) ||			\
+		    (vgt->ports[port].type == VGT_DP_C) ||			\
+		    (vgt->ports[port].type == VGT_DP_D)))
+
+enum transcoder {
+	TRANSCODER_A = 0,
+	TRANSCODER_B,
+	TRANSCODER_C,
+	TRANSCODER_EDP = 0xF,
+};
+
+enum dpcd_index {
+	DPCD_DPA = 0,
+	DPCD_DPB,
+	DPCD_DPC,
+	DPCD_DPD,
+	DPCD_MAX
+};
+
+enum vgt_pipe {
+	PIPE_A = 0,
+	PIPE_B,
+	PIPE_C,
+	I915_MAX_PIPES
+};
+
+enum vgt_port {
+	PORT_A = 0,
+	PORT_B,
+	PORT_C,
+	PORT_D,
+	PORT_E,
+	I915_MAX_PORTS
+};
+
+enum vgt_plane_type {
+	PRIMARY_PLANE = 0,
+	CURSOR_PLANE,
+	SPRITE_PLANE,
+	MAX_PLANE
+};
+
+enum vgt_port_type {
+	VGT_CRT = 0,
+	VGT_DP_A,
+	VGT_DP_B,
+	VGT_DP_C,
+	VGT_DP_D,
+	VGT_HDMI_B,
+	VGT_HDMI_C,
+	VGT_HDMI_D,
+	VGT_PORT_MAX
+};
+
+enum vgt_output_type {
+	VGT_OUTPUT_ANALOG = 0,
+	VGT_OUTPUT_DISPLAYPORT,
+	VGT_OUTPUT_EDP,
+	VGT_OUTPUT_LVDS,
+	VGT_OUTPUT_HDMI,
+	VGT_OUTPUT_MAX
+};
+
+/* PLUG_OUT must equal to PLUG_IN + 1
+ * hot plug handler code has such assumption. Actually it might
+ * be OK to send HOTPLUG only, not necessarily differ IN aond
+ * OUT.
+ */
+enum vgt_uevent_type {
+	CRT_HOTPLUG_IN = 0,
+	CRT_HOTPLUG_OUT,
+	PORT_A_HOTPLUG_IN,
+	PORT_A_HOTPLUG_OUT,
+	PORT_B_HOTPLUG_IN,
+	PORT_B_HOTPLUG_OUT,
+	PORT_C_HOTPLUG_IN,
+	PORT_C_HOTPLUG_OUT,
+	PORT_D_HOTPLUG_IN,
+	PORT_D_HOTPLUG_OUT,
+	VGT_ENABLE_VGA,
+	VGT_DISABLE_VGA,
+	VGT_DISPLAY_READY,
+	VGT_DISPLAY_UNREADY,
+	VGT_DETECT_PORT_A,
+	VGT_DETECT_PORT_B,
+	VGT_DETECT_PORT_C,
+	VGT_DETECT_PORT_D,
+	VGT_DETECT_PORT_E,
+	UEVENT_MAX
+};
+
+typedef union {
+	uint32_t cmd;
+	struct {
+		uint32_t action : 1;
+		uint32_t port_sel: 3;
+		uint32_t rsvd_4_7 : 4;
+		uint32_t vmid : 8;
+		uint32_t rsvd_16_31 : 16;
+	};
+} vgt_hotplug_cmd_t;
+
+struct vgt_uevent_info {
+	char *uevent_name;
+	int vm_id;
+	enum kobject_action action;
+	char *env_var_table[VGT_MAX_UEVENT_VARS];
+	bool (*vgt_uevent_handler)(enum vgt_uevent_type event,
+				struct vgt_uevent_info *uevent_entry,
+				struct pgt_device *dev);
+};
+
+struct hotplug_work {
+	struct work_struct work;
+	DECLARE_BITMAP(hotplug_uevent, UEVENT_MAX);
+	struct mutex hpd_mutex;
+};
+
+struct vgt_dpcd_data {
+	bool data_valid;
+	u8 data[DPCD_SIZE];
+};
+
+struct sbi_register {
+	unsigned int offset;
+	vgt_reg_t value;
+};
+
+struct sbi_registers {
+	int number;
+	struct sbi_register registers[SBI_REG_MAX];
+};
+
+struct port_cache {
+	bool valid;
+	struct vgt_edid_data_t	*edid;	/* per display EDID information */
+	enum vgt_port		port_override;
+	enum vgt_port_type	type;
+};
+
+struct gt_port {
+	struct kobject  	kobj;
+
+	struct vgt_edid_data_t	*edid;	/* per display EDID information */
+	struct vgt_dpcd_data	*dpcd;	/* per display DPCD information */
+	enum vgt_port_type	type;
+	enum vgt_port		port_override;
+	struct port_cache	cache; /* the temporary updated information */
+	enum vgt_port physcal_port;
+};
+
+struct vgt_port_output_struct {
+	unsigned int ctrl_reg;
+	vgt_reg_t enable_bitmask;
+	vgt_reg_t select_bitmask;
+	enum vgt_output_type output_type;
+};
+
+static inline int port_to_port_type(int port_sel)
+{
+        switch(port_sel) {
+        case PORT_A:
+                return VGT_DP_A;
+        case PORT_B:
+                return VGT_DP_B;
+        case PORT_C:
+                return VGT_DP_C;
+        case PORT_D:
+                return VGT_DP_D;
+        case PORT_E:
+                return VGT_CRT;
+	}
+        return VGT_PORT_MAX;
+}
+
+static inline int port_type_to_port(int port_sel)
+{
+	switch(port_sel) {
+	case VGT_DP_A:
+		return PORT_A;
+	case VGT_DP_B:
+	case VGT_HDMI_B:
+		return PORT_B;
+	case VGT_DP_C:
+	case VGT_HDMI_C:
+		return PORT_C;
+	case VGT_DP_D:
+	case VGT_HDMI_D:
+		return PORT_D;
+	case VGT_CRT:
+		return PORT_E;
+	}
+
+	return I915_MAX_PORTS;
+}
+
+int prepare_for_display_switch(struct pgt_device *pdev);
+
+void do_vgt_fast_display_switch(struct pgt_device *pdev);
+
+void vgt_trigger_display_hot_plug(struct pgt_device *dev, vgt_hotplug_cmd_t hotplug_cmd);
+
+void vgt_set_uevent(struct vgt_device *vgt, enum vgt_uevent_type uevent);
+
+void vgt_signal_uevent(struct pgt_device *dev);
+
+void vgt_hotplug_udev_notify_func(struct work_struct *work);
+
+void vgt_update_monitor_status(struct vgt_device *vgt);
+
+bool rebuild_pipe_mapping(struct vgt_device *vgt, unsigned int reg, uint32_t new_data, uint32_t old_data);
+
+bool update_pipe_mapping(struct vgt_device *vgt, unsigned int physical_reg, uint32_t physical_wr_data);
+
+bool set_panel_fitting(struct vgt_device *vgt, enum vgt_pipe pipe);
+
+bool vgt_manage_emul_dpy_events(struct pgt_device *pdev);
+
+void vgt_update_frmcount(struct vgt_device *vgt, enum vgt_pipe pipe);
+
+void vgt_calculate_frmcount_delta(struct vgt_device *vgt, enum vgt_pipe pipe);
+
+void vgt_set_power_well(struct vgt_device *vgt, bool enable);
+
+void vgt_flush_port_info(struct vgt_device *vgt, struct gt_port *port);
+
+void vgt_detect_display(struct vgt_device *vgt, int index);
+
+void vgt_dpy_init_modes(vgt_reg_t *mmio_array);
+
+#endif /*_VGT_DISPLAY_H_*/
diff --git a/drivers/gpu/drm/i915/vgt/reg.h b/drivers/gpu/drm/i915/vgt/reg.h
index 027fe34..9c6c19e 100644
--- a/drivers/gpu/drm/i915/vgt/reg.h
+++ b/drivers/gpu/drm/i915/vgt/reg.h
@@ -1516,105 +1516,6 @@ union _TRANS_CONFIG
  */
 #define _REG_GMBUS0			0x5100 /* clock/port select */
 
-enum vgt_pipe {
-	PIPE_A = 0,
-	PIPE_B,
-	PIPE_C,
-	I915_MAX_PIPES
-};
-
-enum vgt_port {
-	PORT_A = 0,
-	PORT_B,
-	PORT_C,
-	PORT_D,
-	PORT_E,
-	I915_MAX_PORTS
-};
-
-#define VGT_PORT_NAME(p)	\
-	((p) == PORT_A ? "PORT_A" : \
-	((p) == PORT_B ? "PORT_B" : \
-	((p) == PORT_C ? "PORT_C" : \
-	((p) == PORT_D ? "PORT_D" : \
-	((p) == PORT_E ? "PORT_E" : "PORT_X")))))
-
-#define VGT_PIPE_NAME(p)	\
-	((p) == PIPE_A ? "Pipe A" : \
-		((p) == PIPE_B ? "Pipe B" : \
-			((p) == PIPE_C ? "Pipe C" : "PIPE X")))
-#define VGT_PIPE_CHAR(p)	\
-	((p) == PIPE_A ? 'A' : \
-		((p) == PIPE_B ? 'B' : \
-			((p) == PIPE_C ? 'C' : 'X')))
-
-enum vgt_plane_type {
-	PRIMARY_PLANE = 0,
-	CURSOR_PLANE,
-	SPRITE_PLANE,
-	MAX_PLANE
-};
-
-enum vgt_port_type {
-	VGT_CRT = 0,
-	VGT_DP_A,
-	VGT_DP_B,
-	VGT_DP_C,
-	VGT_DP_D,
-	VGT_HDMI_B,
-	VGT_HDMI_C,
-	VGT_HDMI_D,
-	VGT_PORT_MAX
-};
-
-#define VGT_PORT_TYPE_NAME(p)	\
-        ((p) == VGT_CRT ? "VGT_CRT" : \
-        ((p) == VGT_DP_A ? "VGT_DP_A" : \
-        ((p) == VGT_DP_B ? "VGT_DP_B" : \
-        ((p) == VGT_DP_C ? "VGT_DP_C" : \
-	((p) == VGT_DP_D ? "VGT_DP_D" : \
-	((p) == VGT_HDMI_B ? "VGT_HDMI_B" : \
-	((p) == VGT_HDMI_C ? "VGT_HDMI_C" : \
-	((p) == VGT_HDMI_D ? "VGT_HDMI_D" : "UNKNOWN"))))))))
-
-static inline int port_to_port_type(int port_sel)
-{
-        switch(port_sel) {
-        case PORT_A:
-                return VGT_DP_A;
-        case PORT_B:
-                return VGT_DP_B;
-        case PORT_C:
-                return VGT_DP_C;
-        case PORT_D:
-                return VGT_DP_D;
-        case PORT_E:
-                return VGT_CRT;
-	}
-        return VGT_PORT_MAX;
-}
-
-static inline int port_type_to_port(int port_sel)
-{
-	switch(port_sel) {
-	case VGT_DP_A:
-		return PORT_A;
-	case VGT_DP_B:
-	case VGT_HDMI_B:
-		return PORT_B;
-	case VGT_DP_C:
-	case VGT_HDMI_C:
-		return PORT_C;
-	case VGT_DP_D:
-	case VGT_HDMI_D:
-		return PORT_D;
-	case VGT_CRT:
-		return PORT_E;
-	}
-
-	return I915_MAX_PORTS;
-}
-
 /* interrupt related definitions */
 #define _REG_DEISR	0x44000
 #define _REG_DEIMR	0x44004
diff --git a/drivers/gpu/drm/i915/vgt/vgt.h b/drivers/gpu/drm/i915/vgt/vgt.h
index 63d6ea6..9888e56 100644
--- a/drivers/gpu/drm/i915/vgt/vgt.h
+++ b/drivers/gpu/drm/i915/vgt/vgt.h
@@ -37,20 +37,20 @@
 #include <linux/mempool.h>
 #include <drm/drmP.h>
 
-#include "../i915_vgpu.h"
-#include "host.h"
-
 typedef uint32_t vgt_reg_t;
+struct pgt_device;
+struct vgt_device;
 
+#include "../i915_vgpu.h"
+#include "host.h"
 #include "reg.h"
 #include "devtable.h"
+#include "display.h"
 #include "edid.h"
 #include "cmd_parser.h"
 #include "hypercall.h"
 #include "execlists.h"
 
-struct pgt_device;
-struct vgt_device;
 extern struct vgt_device *vgt_dom0;
 extern struct pgt_device *perf_pgt;
 extern struct list_head pgt_devices;
@@ -223,13 +223,6 @@ enum vgt_event_type {
 };
 
 
-enum transcoder {
-	TRANSCODER_A = 0,
-	TRANSCODER_B,
-	TRANSCODER_C,
-	TRANSCODER_EDP = 0xF,
-};
-
 enum map_type {
 	VGT_MAP_APERTURE,
 	VGT_MAP_OPREGION,
@@ -291,7 +284,6 @@ struct vgt_rsvd_ring {
 #define _vgt_mmio_pa(pdev, x)		(pdev->gttmmio_base+x)			/* PA to VA */
 
 #define VGT_RING_TIMEOUT	500	/* in ms */
-#define VGT_VBLANK_TIMEOUT	50	/* in ms */
 
 /* Maximum VMs supported by vGT. Actual number is device specific */
 #define VGT_MAX_VMS_HSW 		4
@@ -730,8 +722,6 @@ struct execlist_context {
 	struct hlist_node node;
 };
 
-extern enum vgt_pipe surf_used_pipe;
-
 struct pgt_device;
 
 struct vgt_render_context_ops {
@@ -859,83 +849,6 @@ struct vgt_tailq {
 };
 #define vgt_tailq_idx(idx) ((idx) & VGT_TAILQ_IDX_MASK)
 
-/* DPCD start */
-#define DPCD_SIZE	0x700
-
-struct vgt_dpcd_data {
-	bool data_valid;
-	u8 data[DPCD_SIZE];
-};
-
-enum dpcd_index {
-	DPCD_DPA = 0,
-	DPCD_DPB,
-	DPCD_DPC,
-	DPCD_DPD,
-	DPCD_MAX
-};
-
-/* DPCD addresses */
-#define DPCD_REV			0x000
-#define DPCD_MAX_LINK_RATE			0x001
-#define DPCD_MAX_LANE_COUNT			0x002
-
-#define DPCD_TRAINING_PATTERN_SET	0x102
-#define	DPCD_SINK_COUNT			0x200
-#define DPCD_LANE0_1_STATUS		0x202
-#define DPCD_LANE2_3_STATUS		0x203
-#define DPCD_LANE_ALIGN_STATUS_UPDATED	0x204
-#define DPCD_SINK_STATUS		0x205
-
-/* link training */
-#define DPCD_TRAINING_PATTERN_SET_MASK	0x03
-#define DPCD_LINK_TRAINING_DISABLED	0x00
-#define DPCD_TRAINING_PATTERN_1		0x01
-#define DPCD_TRAINING_PATTERN_2		0x02
-
-#define DPCD_CP_READY_MASK		(1 << 6)
-
-/* lane status */
-#define DPCD_LANES_CR_DONE		0x11
-#define DPCD_LANES_EQ_DONE		0x22
-#define DPCD_SYMBOL_LOCKED		0x44
-
-#define DPCD_INTERLANE_ALIGN_DONE	0x01
-
-#define DPCD_SINK_IN_SYNC		0x03
-
-/* DPCD end */
-
-#define SBI_REG_MAX	20
-
-struct sbi_register {
-	unsigned int offset;
-	vgt_reg_t value;
-};
-
-struct sbi_registers {
-	int number;
-	struct sbi_register registers[SBI_REG_MAX];
-};
-
-struct port_cache {
-	bool valid;
-	struct vgt_edid_data_t	*edid;	/* per display EDID information */
-	enum vgt_port		port_override;
-	enum vgt_port_type	type;
-};
-
-struct gt_port {
-	struct kobject  	kobj;
-
-	struct vgt_edid_data_t	*edid;	/* per display EDID information */
-	struct vgt_dpcd_data	*dpcd;	/* per display DPCD information */
-	enum vgt_port_type	type;
-	enum vgt_port		port_override;
-	struct port_cache	cache; /* the temporary updated information */
-	enum vgt_port physcal_port;
-};
-
 struct vgt_device {
 	enum vgt_pipe pipe_mapping[I915_MAX_PIPES];
 	int vgt_id;		/* 0 is always for dom0 */
@@ -1067,50 +980,6 @@ typedef union {
 } vgt_aux_entry_t;
 
 struct vgt_irq_host_state;
-#define VGT_VBIOS_PAGES 16
-
-/* PLUG_OUT must equal to PLUG_IN + 1
- * hot plug handler code has such assumption. Actually it might
- * be OK to send HOTPLUG only, not necessarily differ IN aond
- * OUT.
- */
-enum vgt_uevent_type {
-	CRT_HOTPLUG_IN = 0,
-	CRT_HOTPLUG_OUT,
-	PORT_A_HOTPLUG_IN,
-	PORT_A_HOTPLUG_OUT,
-	PORT_B_HOTPLUG_IN,
-	PORT_B_HOTPLUG_OUT,
-	PORT_C_HOTPLUG_IN,
-	PORT_C_HOTPLUG_OUT,
-	PORT_D_HOTPLUG_IN,
-	PORT_D_HOTPLUG_OUT,
-	VGT_ENABLE_VGA,
-	VGT_DISABLE_VGA,
-	VGT_DISPLAY_READY,
-	VGT_DISPLAY_UNREADY,
-	VGT_DETECT_PORT_A,
-	VGT_DETECT_PORT_B,
-	VGT_DETECT_PORT_C,
-	VGT_DETECT_PORT_D,
-	VGT_DETECT_PORT_E,
-	UEVENT_MAX
-};
-
-#define HOTPLUG_VMID_FOR_ALL_VMS	0xff
-
-#define VGT_MAX_UEVENT_VARS 20
-struct vgt_uevent_info {
-	char *uevent_name;
-	int vm_id;
-	enum kobject_action action;
-	char *env_var_table[VGT_MAX_UEVENT_VARS];
-	bool (*vgt_uevent_handler)(enum vgt_uevent_type event,
-				struct vgt_uevent_info *uevent_entry,
-				struct pgt_device *dev);
-};
-
-void vgt_set_uevent(struct vgt_device *vgt, enum vgt_uevent_type uevent);
 
 enum vgt_trace_type {
 	VGT_TRACE_READ,
@@ -1118,17 +987,6 @@ enum vgt_trace_type {
 };
 
 typedef union {
-	uint32_t cmd;
-	struct {
-		uint32_t action : 1;
-		uint32_t port_sel: 3;
-		uint32_t rsvd_4_7 : 4;
-		uint32_t vmid : 8;
-		uint32_t rsvd_16_31 : 16;
-	};
-} vgt_hotplug_cmd_t;
-
-typedef union {
 	uint32_t dw;
 	struct {
 		uint32_t virtual_event: 16;
@@ -1137,21 +995,6 @@ typedef union {
 	};
 } vgt_virtual_event_t;
 
-struct hotplug_work {
-	struct work_struct work;
-	DECLARE_BITMAP(hotplug_uevent, UEVENT_MAX);
-	struct mutex hpd_mutex;
-};
-
-enum vgt_output_type {
-	VGT_OUTPUT_ANALOG = 0,
-	VGT_OUTPUT_DISPLAYPORT,
-	VGT_OUTPUT_EDP,
-	VGT_OUTPUT_LVDS,
-	VGT_OUTPUT_HDMI,
-	VGT_OUTPUT_MAX
-};
-
 struct pgt_statistics {
 	u64	irq_num;
 	u64	last_pirq;
@@ -1345,35 +1188,6 @@ struct pgt_device {
 	 (d->next_sched_vgt != current_render_owner(d)))
 #define vgt_ctx_check(d)		(d->ctx_check)
 #define vgt_ctx_switch(d)		(d->ctx_switch)
-#define vgt_has_edp_enabled(vgt, pipe)							\
-		(vgt && ((pipe) >= PIPE_A) && ((pipe) < I915_MAX_PIPES) &&		\
-		(__vreg((vgt), _REG_PIPE_EDP_CONF) & _REGBIT_PIPE_ENABLE) &&		\
-		(pipe == get_edp_input(__vreg(vgt, _REG_TRANS_DDI_FUNC_CTL_EDP))))
-#define vgt_has_pipe_enabled(vgt, pipe)				\
-		(vgt && ((pipe) >= PIPE_A) && ((pipe) < I915_MAX_PIPES) &&	\
-		((__vreg((vgt), VGT_PIPECONF(pipe)) & _REGBIT_PIPE_ENABLE) ||	\
-			vgt_has_edp_enabled(vgt, pipe)))
-#define pdev_has_pipe_enabled(pdev, pipe)					\
-		(pdev && ((pipe) >= PIPE_A) && ((pipe) < I915_MAX_PIPES) &&	\
-		((__vreg(current_display_owner(pdev),				\
-			VGT_PIPECONF(pipe)) & _REGBIT_PIPE_ENABLE) ||		\
-			vgt_has_edp_enabled(current_display_owner(pdev), pipe)))
-#define dpy_is_valid_port(port)							\
-		(((port) >= PORT_A) && ((port) < I915_MAX_PORTS))
-
-#define dpy_has_monitor_on_port(vgt, port)					\
-		(vgt && dpy_is_valid_port(port) &&				\
-		vgt->ports[port].edid && vgt->ports[port].edid->data_valid)
-
-#define dpy_port_is_dp(vgt, port)						\
-		((vgt) && dpy_is_valid_port(port)				\
-		&& ((vgt->ports[port].type == VGT_DP_A) ||			\
-		    (vgt->ports[port].type == VGT_DP_B) ||			\
-		    (vgt->ports[port].type == VGT_DP_C) ||			\
-		    (vgt->ports[port].type == VGT_DP_D)))
-
-extern int prepare_for_display_switch(struct pgt_device *pdev);
-extern void do_vgt_fast_display_switch(struct pgt_device *pdev);
 
 #define reg_addr_fix(pdev, reg)		(pdev->reg_info[REG_INDEX(reg)] & VGT_REG_ADDR_FIX)
 #define reg_hw_status(pdev, reg)	(pdev->reg_info[REG_INDEX(reg)] & VGT_REG_HW_STATUS)
@@ -2709,9 +2523,6 @@ void vgt_reset_execlist(struct vgt_device *vgt, unsigned long ring_bitmap);
 enum vgt_pipe get_edp_input(uint32_t wr_data);
 void vgt_forward_events(struct pgt_device *pdev);
 void vgt_emulate_dpy_events(struct pgt_device *pdev);
-bool vgt_manage_emul_dpy_events(struct pgt_device *pdev);
-void vgt_update_frmcount(struct vgt_device *vgt, enum vgt_pipe pipe);
-void vgt_calculate_frmcount_delta(struct vgt_device *vgt, enum vgt_pipe pipe);
 void *vgt_install_irq(struct pci_dev *pdev, struct drm_device *dev);
 int vgt_irq_init(struct pgt_device *pgt);
 void vgt_irq_exit(struct pgt_device *pgt);
@@ -2724,11 +2535,6 @@ bool vgt_rrmr_mmio_write(struct vgt_device *vgt, unsigned int offset,
 void vgt_trigger_virtual_event(struct vgt_device *vgt,
 	enum vgt_event_type event);
 
-void vgt_trigger_display_hot_plug(struct pgt_device *dev, vgt_hotplug_cmd_t hotplug_cmd);
-
-void vgt_signal_uevent(struct pgt_device *dev);
-void vgt_hotplug_udev_notify_func(struct work_struct *work);
-
 u32 vgt_recalculate_ier(struct pgt_device *pdev, unsigned int reg);
 u32 vgt_recalculate_mask_bits(struct pgt_device *pdev, unsigned int reg);
 
@@ -2779,8 +2585,6 @@ static inline void vgt_set_pipe_mapping(struct vgt_device *vgt,
 	}
 }
 
-bool rebuild_pipe_mapping(struct vgt_device *vgt, unsigned int reg, uint32_t new_data, uint32_t old_data);
-bool update_pipe_mapping(struct vgt_device *vgt, unsigned int physical_reg, uint32_t physical_wr_data);
 
 #include <drm/drmP.h>
 
@@ -2801,9 +2605,6 @@ void vgt_release_instance(struct vgt_device *vgt);
 int vgt_init_sysfs(struct pgt_device *pdev);
 void vgt_destroy_sysfs(void);
 extern void vgt_clear_port(struct vgt_device *vgt, int index);
-void vgt_update_monitor_status(struct vgt_device *vgt);
-void vgt_detect_display(struct vgt_device *vgt, int index);
-void vgt_dpy_init_modes(vgt_reg_t *mmio_array);
 
 bool default_mmio_read(struct vgt_device *vgt, unsigned int offset,	void *p_data, unsigned int bytes);
 bool default_mmio_write(struct vgt_device *vgt, unsigned int offset, void *p_data, unsigned int bytes);
@@ -2819,10 +2620,6 @@ bool ring_mmio_read_in_rb_mode(struct vgt_device *vgt, unsigned int off,
 bool ring_uhptr_write_in_rb_mode(struct vgt_device *vgt, unsigned int off,
 	void *p_data, unsigned int bytes);
 
-bool set_panel_fitting(struct vgt_device *vgt, enum vgt_pipe pipe);
-void vgt_set_power_well(struct vgt_device *vgt, bool enable);
-void vgt_flush_port_info(struct vgt_device *vgt, struct gt_port *port);
-
 extern bool gtt_emulate_read(struct vgt_device *vgt, unsigned int off,
 	void *p_data, unsigned int bytes);
 
@@ -2875,13 +2672,6 @@ extern u64 ring_0_idle;
 extern u64 ring_0_busy;
 extern u64 vm_pending_irq[VGT_MAX_VMS];
 
-struct vgt_port_output_struct {
-	unsigned int ctrl_reg;
-	vgt_reg_t enable_bitmask;
-	vgt_reg_t select_bitmask;
-	enum vgt_output_type output_type;
-};
-
 struct vgt_mmio_dev {
 	int devid_major;
 	char *dev_name;
@@ -3128,7 +2918,6 @@ static inline bool hypervisor_write_va(struct vgt_device *vgt, void *va,
 	return ret;
 }
 
-
 #define ASSERT_VM(x, vgt)						\
 	do {								\
 		if (!(x)) {						\
-- 
1.7.10.4

