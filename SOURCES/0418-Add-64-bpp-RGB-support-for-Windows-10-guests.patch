From 89bae8dc2b1d5af1c50d6a81f7bac1cf4a6ba5e3 Mon Sep 17 00:00:00 2001
From: Xu Han <xu.han@intel.com>
Date: Tue, 5 Apr 2016 10:25:36 +0800
Subject: [PATCH 418/433] Add 64 bpp RGB support for Windows 10 guests.

* This patch will add 64 bpp RGB support for Windows 10 guests.

* Here add 64 bpp RGB defination with "_VGT" postfix, such as "DRM_FORMAT_XBGR161616_VGT".
It is only a temperary defination, due to DRM code not define 64 bpp RGB so far.
After DRM code add 64 bpp RGB definations, it need to remove these temperary VGT definations,
and then use the DRM definations.

* Bug #1022, [4.3.0-rc6-vgt+][BDW-H][win10][DirectX12] Guest black screen and crash while
running "DXGIGammaVM.exe". After this patch, the guest will not crash.

Signed-off-by: Xu Han <xu.han@intel.com>
---
 drivers/gpu/drm/i915/vgt/fb_decoder.c |   17 ++++++++++++++++-
 include/uapi/drm/drm_fourcc.h         |    8 ++++++++
 2 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/vgt/fb_decoder.c b/drivers/gpu/drm/i915/vgt/fb_decoder.c
index 5a0092b..7aef780 100644
--- a/drivers/gpu/drm/i915/vgt/fb_decoder.c
+++ b/drivers/gpu/drm/i915/vgt/fb_decoder.c
@@ -38,6 +38,7 @@ static struct pixel_format hsw_pixel_formats[FORMAT_NUM] = {
 	[0b0110]  = {DRM_FORMAT_XRGB8888, 32, "32-bit BGRX (8:8:8:8 MSB-X:R:G:B)"},
 	[0b1000]  = {DRM_FORMAT_XBGR2101010, 32, "32-bit RGBX (2:10:10:10 MSB-X:B:G:R)"},
 	[0b1010] = {DRM_FORMAT_XRGB2101010, 32, "32-bit BGRX (2:10:10:10 MSB-X:R:G:B)"},
+	[0b1100] = {DRM_FORMAT_XRGB161616_VGT, 64, "64-bit RGBX Floating Point(16:16:16:16 MSB-X:B:G:R)"},
 	[0b1110] = {DRM_FORMAT_XBGR8888, 32, "32-bit RGBX (8:8:8:8 MSB-X:B:G:R)"},
 };
 
@@ -57,6 +58,9 @@ static struct pixel_format skl_pixel_formats[] = {
 	{DRM_FORMAT_XBGR2101010, 32, "32-bit RGBX (2:10:10:10 MSB-X:B:G:R)"},
 	{DRM_FORMAT_XRGB2101010, 32, "32-bit BGRX (2:10:10:10 MSB-X:R:G:B)"},
 
+	{DRM_FORMAT_XRGB161616_VGT, 64, "64-bit XRGB (16:16:16:16 MSB-X:R:G:B)"},
+	{DRM_FORMAT_XBGR161616_VGT, 64, "64-bit XBGR (16:16:16:16 MSB-X:B:G:R)"},
+
 	/* non-supported format has bpp default to 0 */
 	{0, 0, NULL},
 };
@@ -72,12 +76,13 @@ static struct pixel_format hsw_pixel_formats_sprite[FORMAT_NUM_SRRITE] = {
 	[0b000]  = {DRM_FORMAT_YUV422, 16, "YUV 16-bit 4:2:2 packed"},
 	[0b001]  = {DRM_FORMAT_XRGB2101010, 32, "RGB 32-bit 2:10:10:10"},
 	[0b010]  = {DRM_FORMAT_XRGB8888, 32, "RGB 32-bit 8:8:8:8"},
+	[0b011]  = {DRM_FORMAT_XRGB161616_VGT, 64, "RGB 64-bit 16:16:16:16 Floating Point"},
 	[0b100] = {DRM_FORMAT_AYUV, 32, "YUV 32-bit 4:4:4 packed (8:8:8:8 MSB-X:Y:U:V)"},
 };
 
 static int skl_format_to_drm(int format, bool rgb_order, bool alpha, int yuv_order)
 {
-	int skl_pixel_formats_index = 12;
+	int skl_pixel_formats_index = 14;
 
 	switch (format) {
 	case PLANE_CTL_FORMAT_INDEXED:
@@ -105,6 +110,14 @@ static int skl_format_to_drm(int format, bool rgb_order, bool alpha, int yuv_ord
 		else
 			skl_pixel_formats_index = 11;
 		break;
+
+	case PLANE_CTL_FORMAT_XRGB_16161616F:
+		if (rgb_order)
+			skl_pixel_formats_index = 12;
+		else
+			skl_pixel_formats_index = 13;
+		break;
+
 	case PLANE_CTL_FORMAT_YUV422:
 		skl_pixel_formats_index = yuv_order >> 16;
 		if (skl_pixel_formats_index > 3)
@@ -177,6 +190,8 @@ int vgt_get_pixel_format_preskl(u32 plane_ctl,
 				drm_format = DRM_FORMAT_XBGR2101010;
 			else if (drm_format == DRM_FORMAT_XRGB8888)
 				drm_format = DRM_FORMAT_XBGR8888;
+			else if (drm_format == DRM_FORMAT_XRGB161616_VGT)
+				drm_format = DRM_FORMAT_XBGR161616_VGT;
 		}
 
 		if (drm_format == DRM_FORMAT_YUV422) {
diff --git a/include/uapi/drm/drm_fourcc.h b/include/uapi/drm/drm_fourcc.h
index 8c5e8b9..d226af2 100644
--- a/include/uapi/drm/drm_fourcc.h
+++ b/include/uapi/drm/drm_fourcc.h
@@ -94,6 +94,14 @@
 #define DRM_FORMAT_RGBA1010102	fourcc_code('R', 'A', '3', '0') /* [31:0] R:G:B:A 10:10:10:2 little endian */
 #define DRM_FORMAT_BGRA1010102	fourcc_code('B', 'A', '3', '0') /* [31:0] B:G:R:A 10:10:10:2 little endian */
 
+/* 64 bpp RGB, below two items is add by VGT project, the reason as below:
+ * 1. Current version DRM code is not contains 64 bpp RGB definations.
+ * 2. VGT should support 64 bpp RGB for Windows 10 guest.
+ * 3. VGT add the 64 bpp RGB definations temperarily, before the DRM code add these definations.
+ */
+#define DRM_FORMAT_XRGB161616_VGT  fourcc_code('X', 'R', '4', '8') /* [63:0] x:R:G:B 16:16:16:16 little endian */
+#define DRM_FORMAT_XBGR161616_VGT  fourcc_code('X', 'B', '4', '8') /* [63:0] x:B:G:R 16:16:16:16 little endian */
+
 /* packed YCbCr */
 #define DRM_FORMAT_YUYV		fourcc_code('Y', 'U', 'Y', 'V') /* [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian */
 #define DRM_FORMAT_YVYU		fourcc_code('Y', 'V', 'Y', 'U') /* [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian */
-- 
1.7.10.4

