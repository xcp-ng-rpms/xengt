From 69e9230b2c764f0ab91e5d72f18290dd7b116525 Mon Sep 17 00:00:00 2001
From: Ping Gao <ping.a.gao@intel.com>
Date: Fri, 9 Oct 2015 14:46:01 +0800
Subject: [PATCH 261/403] vgt: security: special registers emulate in LRI

DE_RRMR and MUL_FORCEWAKE are full virtualized, keep the same policy when access
by LRI.

Signed-off-by: Ping Gao <ping.a.gao@intel.com>
---
 drivers/gpu/drm/i915/vgt/cmd_parser.c |   49 +++++++++++++++++----------------
 drivers/gpu/drm/i915/vgt/handlers.c   |    2 +-
 drivers/gpu/drm/i915/vgt/vgt.h        |    2 ++
 3 files changed, 28 insertions(+), 25 deletions(-)

diff --git a/drivers/gpu/drm/i915/vgt/cmd_parser.c b/drivers/gpu/drm/i915/vgt/cmd_parser.c
index 15f7ddf..15db0e2 100644
--- a/drivers/gpu/drm/i915/vgt/cmd_parser.c
+++ b/drivers/gpu/drm/i915/vgt/cmd_parser.c
@@ -732,34 +732,40 @@ static int vgt_cmd_handler_mi_set_context(struct parser_exec_state* s)
 
 #define BIT_RANGE_MASK(a, b)	\
 	((1UL << ((a) + 1)) - (1UL << (b)))
-
-static int vgt_cmd_handler_lri_de_rrmr(struct parser_exec_state *s)
+static int vgt_cmd_handler_lri_emulate(struct parser_exec_state *s)
 {
 	int i;
 	int cmd_len = cmd_length(s);
-	unsigned long offset;
-	unsigned long val;
+	unsigned int offset;
+	uint32_t val;
 
 	for (i = 1; i < cmd_len; i += 2) {
 		offset = cmd_val(s, i) & BIT_RANGE_MASK(22, 2);
 		val = cmd_val(s, i + 1);
 
-		if (offset == _REG_DE_RRMR)
+		if (offset == _REG_DE_RRMR || offset == FORCEWAKE_MT)
 			break;
 	}
 
 	if (i == cmd_len) {
-		vgt_err("No DE_RRMR in LRI?");
+		vgt_err("No DE_RRMR or MUL_FORCEWAKE in LRI?\n");
 		return -EINVAL;
 	}
 
-	if (!vgt_rrmr_mmio_write(s->vgt, _REG_DE_RRMR, &val, 4)) {
-		vgt_err("fail to emulate register DE_RRMR!\n");
-		return -EINVAL;
+	if (offset == _REG_DE_RRMR) {
+		if (!vgt_rrmr_mmio_write(s->vgt, offset, &val, 4)) {
+			vgt_err("fail to emulate register 0x%x!\n", offset);
+			return -EINVAL;
+		}
+	} else if (offset == FORCEWAKE_MT) {
+		if (!mul_force_wake_write(s->vgt, offset, &val, 4)) {
+			vgt_err("fail to emulate register 0x%x!\n", offset);
+			return -EINVAL;
+		}
 	}
 
-	if (add_patch_entry(s, cmd_ptr(s, i + 1),
-				VGT_MMIO_READ(s->vgt->pdev, _REG_DE_RRMR))) {
+	if (offset == _REG_DE_RRMR && add_patch_entry(s, cmd_ptr(s, i + 1),
+				VGT_MMIO_READ(s->vgt->pdev, offset))) {
 		vgt_err("fail to patch DE_RRMR LRI.\n");
 		return -ENOSPC;
 	}
@@ -784,7 +790,12 @@ static int cmd_reg_handler(struct parser_exec_state *s,
 	     (!vgt->vm_id && reg_is_config(pdev, offset)) ) {
 		rc = 0;
 	} else if (offset == _REG_DE_RRMR || offset == FORCEWAKE_MT) {
-		rc = 0;
+		if (!strcmp(cmd, "lri")) {
+			rc = add_post_handle_entry(s, vgt_cmd_handler_lri_emulate);
+			if (rc) {
+					vgt_err("fail to allocate post handle");
+			}
+		}
 	}
 
 reg_handle:
@@ -798,22 +809,12 @@ reg_handle:
 
 static int vgt_cmd_handler_lri(struct parser_exec_state *s)
 {
-	unsigned long offset;
 	int i, rc = 0;
 	int cmd_len = cmd_length(s);
 
 	for (i = 1; i < cmd_len; i += 2) {
-		offset = cmd_val(s, i) & BIT_RANGE_MASK(22, 2);
-		rc |= cmd_reg_handler(s, offset, i, "lri");
-
-		if ((IS_BDW(s->vgt->pdev) || IS_SKL(s->vgt->pdev))
-			&& offset == _REG_DE_RRMR) {
-			rc = add_post_handle_entry(s, vgt_cmd_handler_lri_de_rrmr);
-			if (rc) {
-				vgt_err("fail to allocate post handle");
-				break;
-			}
-		}
+		rc |= cmd_reg_handler(s,
+			cmd_val(s, i) & BIT_RANGE_MASK(22, 2), i, "lri");
 	}
 
 	return rc;
diff --git a/drivers/gpu/drm/i915/vgt/handlers.c b/drivers/gpu/drm/i915/vgt/handlers.c
index 81b5db8..e4d972a 100644
--- a/drivers/gpu/drm/i915/vgt/handlers.c
+++ b/drivers/gpu/drm/i915/vgt/handlers.c
@@ -225,7 +225,7 @@ static bool mul_force_wake_ack_read(struct vgt_device *vgt, unsigned int offset,
 	return true;
 }
 
-static bool mul_force_wake_write(struct vgt_device *vgt, unsigned int offset,
+bool mul_force_wake_write(struct vgt_device *vgt, unsigned int offset,
 	void *p_data, unsigned int bytes)
 {
 	uint32_t data, mask, wake, old_wake, new_wake;
diff --git a/drivers/gpu/drm/i915/vgt/vgt.h b/drivers/gpu/drm/i915/vgt/vgt.h
index a16638b..2305b1b 100644
--- a/drivers/gpu/drm/i915/vgt/vgt.h
+++ b/drivers/gpu/drm/i915/vgt/vgt.h
@@ -1624,6 +1624,8 @@ void vgt_inject_flip_done(struct vgt_device *vgt, enum pipe pipe);
 
 bool vgt_rrmr_mmio_write(struct vgt_device *vgt, unsigned int offset,
         void *p_data, unsigned int bytes);
+bool mul_force_wake_write(struct vgt_device *vgt, unsigned int offset,
+		    void *p_data, unsigned int bytes);
 
 void vgt_trigger_virtual_event(struct vgt_device *vgt,
 	enum vgt_event_type event);
-- 
1.7.10.4

