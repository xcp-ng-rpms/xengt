From 1a7de46808895fe09d921f6e55ae11076ec27571 Mon Sep 17 00:00:00 2001
From: Jike Song <jike.song@intel.com>
Date: Wed, 20 May 2015 16:54:34 +0800
Subject: [PATCH 113/403] i915/vgt: make it unloadable

If builtin, the module exit function specified by module_exit()
will never be called.

Now as a LKM, i915 must be able to cleanup everything that
allocated/initialized by vgt. This patch fixed several BUGs
exposed during module unload:

	- klog rchan may be uninitialized, but vgt didn't check it;
	- we can't clean up GGTT contents by calling into intel-gtt,
	  it is only for GEN <= 5;
	- in the vgt main thread, we can not wait for event without
	  checking kthread_should_stop();
	- removing elements from a double-linked list, we should
	  use the xxx_safe() variants;
also find bugs in unload path

Signed-off-by: Jike Song <jike.song@intel.com>
Signed-off-by: Niu,Bing <bing.niu@intel.com>
---
 drivers/gpu/drm/i915/i915_irq.c      |    1 +
 drivers/gpu/drm/i915/vgt/host.c      |    6 ++++++
 drivers/gpu/drm/i915/vgt/host.h      |    1 +
 drivers/gpu/drm/i915/vgt/instance.c  |    8 +++----
 drivers/gpu/drm/i915/vgt/interrupt.c |    5 -----
 drivers/gpu/drm/i915/vgt/klog.c      |    2 +-
 drivers/gpu/drm/i915/vgt/utility.c   |    5 ++---
 drivers/gpu/drm/i915/vgt/vgt.c       |   38 +++++++++++++++++-----------------
 drivers/xen/xengt.c                  |   23 +++++++++++++-------
 9 files changed, 48 insertions(+), 41 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_irq.c b/drivers/gpu/drm/i915/i915_irq.c
index 88dbe95..e220a9d 100644
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@ -4448,6 +4448,7 @@ static void vgt_irq_uninstall(struct drm_device *dev)
 	irq_work_sync(&dev_priv->irq_work);
 
 	dev_priv->irq_ops.irq_uninstall(dev);
+
 	vgt_fini_irq(dev->pdev);
 }
 #endif
diff --git a/drivers/gpu/drm/i915/vgt/host.c b/drivers/gpu/drm/i915/vgt/host.c
index 0acdd66..31a76e2 100644
--- a/drivers/gpu/drm/i915/vgt/host.c
+++ b/drivers/gpu/drm/i915/vgt/host.c
@@ -147,6 +147,11 @@ bool vgt_host_write(u32 reg, void *val, int len, bool is_gtt, bool trace)
 	return vgt_ops->emulate_write(vgt_dom0, pa, val, len);
 }
 
+void tmp_vgt_clear_gtt(unsigned int gtt_size)
+{
+	memset_io(dev_priv->gtt.gsm, 0, gtt_size);
+}
+
 void vgt_host_irq_sync(void)
 {
 	irq_work_sync(&dev_priv->irq_work);
@@ -167,3 +172,4 @@ void vgt_force_wake_put(void)
 {
 	intel_uncore_forcewake_put(dev_priv, FORCEWAKE_ALL);
 }
+
diff --git a/drivers/gpu/drm/i915/vgt/host.h b/drivers/gpu/drm/i915/vgt/host.h
index 33df2f2..eb50c9a 100644
--- a/drivers/gpu/drm/i915/vgt/host.h
+++ b/drivers/gpu/drm/i915/vgt/host.h
@@ -44,6 +44,7 @@ bool vgt_native_gtt_read(u32 reg, void *val, int len);
 bool vgt_native_gtt_write(u32 reg, void *val, int len);
 void vgt_host_irq(int);
 void vgt_host_irq_sync(void);
+void tmp_vgt_clear_gtt(unsigned int);
 
 void vgt_force_wake_get(void);
 void vgt_force_wake_put(void);
diff --git a/drivers/gpu/drm/i915/vgt/instance.c b/drivers/gpu/drm/i915/vgt/instance.c
index d9edc76..8a22870 100644
--- a/drivers/gpu/drm/i915/vgt/instance.c
+++ b/drivers/gpu/drm/i915/vgt/instance.c
@@ -342,7 +342,6 @@ void vgt_release_instance(struct vgt_device *vgt)
 {
 	int i;
 	struct pgt_device *pdev = vgt->pdev;
-	struct list_head *pos;
 	struct vgt_device *v = NULL;
 	int cpu;
 
@@ -356,8 +355,7 @@ void vgt_release_instance(struct vgt_device *vgt)
 	vgt_lock_dev(pdev, cpu);
 
 	printk("check render ownership...\n");
-	list_for_each (pos, &pdev->rendering_runq_head) {
-		v = list_entry (pos, struct vgt_device, list);
+	list_for_each_entry(v, &pdev->rendering_runq_head, list) {
 		if (v == vgt)
 			break;
 	}
@@ -389,7 +387,7 @@ void vgt_release_instance(struct vgt_device *vgt)
 	vgt_unlock_dev(pdev, cpu);
 	if (vgt->force_removal)
 		/* wait for removal completion */
-		wait_event(pdev->destroy_wq, !vgt->force_removal);
+		wait_event_killable(pdev->destroy_wq, !vgt->force_removal);
 
 	printk("release display/render ownership... done\n");
 
@@ -398,7 +396,6 @@ void vgt_release_instance(struct vgt_device *vgt)
 		vgt_destroy_rb_tailq(vgt);
 
 	vgt_clean_vgtt(vgt);
-	hypervisor_hvm_exit(vgt);
 
 	if (vgt->state.opregion_va) {
 		vgt_hvm_opregion_map(vgt, 0);
@@ -406,6 +403,7 @@ void vgt_release_instance(struct vgt_device *vgt)
 				VGT_OPREGION_PORDER);
 	}
 
+	hypervisor_hvm_exit(vgt);
 	vgt_lock_dev(pdev, cpu);
 
 	vgt->pdev->device[vgt->vgt_id] = NULL;
diff --git a/drivers/gpu/drm/i915/vgt/interrupt.c b/drivers/gpu/drm/i915/vgt/interrupt.c
index 2c7e5a5..1294a50 100644
--- a/drivers/gpu/drm/i915/vgt/interrupt.c
+++ b/drivers/gpu/drm/i915/vgt/interrupt.c
@@ -2120,12 +2120,7 @@ int vgt_irq_init(struct pgt_device *pdev)
 
 void vgt_irq_exit(struct pgt_device *pdev)
 {
-	free_irq(pdev->irq_hstate->pirq, pdev);
 	hrtimer_cancel(&pdev->irq_hstate->dpy_timer.timer);
-
-	/* TODO: recover i915 handler? */
-	//unbind_from_irq(vgt_i915_irq(pdev));
-
 	kfree(pdev->irq_hstate);
 }
 
diff --git a/drivers/gpu/drm/i915/vgt/klog.c b/drivers/gpu/drm/i915/vgt/klog.c
index 412bc1c..c5dc94d 100644
--- a/drivers/gpu/drm/i915/vgt/klog.c
+++ b/drivers/gpu/drm/i915/vgt/klog.c
@@ -35,7 +35,7 @@ static char klog_buf[NR_CPUS][KLOG_TMPBUF_SIZE];
 /* This app's channel/control files will appear in /debug/klog */
 #define APP_DIR		"klog"
 
-static struct rchan *	chan;
+static struct rchan *chan = NULL;
 
 /* app data */
 static struct dentry *	dir;
diff --git a/drivers/gpu/drm/i915/vgt/utility.c b/drivers/gpu/drm/i915/vgt/utility.c
index 87074cb..b5232eb4 100644
--- a/drivers/gpu/drm/i915/vgt/utility.c
+++ b/drivers/gpu/drm/i915/vgt/utility.c
@@ -835,9 +835,8 @@ err_out:
 
 void free_gtt(struct pgt_device *pdev)
 {
-	intel_gtt_clear_range(0,
-		(phys_aperture_sz(pdev) - GTT_PAGE_SIZE)/PAGE_SIZE);
-
+	/* TODO: move this to host i915, when it is GVT-g aware */
+	tmp_vgt_clear_gtt(pdev->gtt_size);
 	vgt_free_gtt_pages(pdev);
 }
 
diff --git a/drivers/gpu/drm/i915/vgt/vgt.c b/drivers/gpu/drm/i915/vgt/vgt.c
index 7e2ce7f..3a92823 100644
--- a/drivers/gpu/drm/i915/vgt/vgt.c
+++ b/drivers/gpu/drm/i915/vgt/vgt.c
@@ -195,7 +195,6 @@ struct pgt_device default_device = {
 
 struct vgt_device *vgt_dom0;
 struct pgt_device *pdev_default = &default_device;
-struct drm_i915_private *dev_priv = NULL;
 DEFINE_PER_CPU(u8, in_vgt);
 
 uint64_t vgt_gttmmio_va(struct pgt_device *pdev, off_t reg)
@@ -261,12 +260,15 @@ static int vgt_thread(void *priv)
 	while (!kthread_should_stop()) {
 		enum vgt_ring_id ring_id;
 		bool ctx_irq_received = false;
-		ret = wait_event_interruptible(pdev->event_wq,
-			pdev->request || freezing(current));
+		ret = wait_event_interruptible(pdev->event_wq, kthread_should_stop() ||
+					pdev->request || freezing(current));
 
 		if (ret)
 			vgt_warn("Main thread waken up by unexpected signal!\n");
 
+		if (kthread_should_stop())
+			break;
+
 		if (!pdev->request && !freezing(current)) {
 			vgt_warn("Main thread waken up by unknown reasons!\n");
 			continue;
@@ -706,10 +708,10 @@ static bool vgt_initialize_pgt_device(struct pci_dev *dev, struct pgt_device *pd
 
 void vgt_destroy(void)
 {
-	struct list_head *pos, *next;
-	struct vgt_device *vgt;
+	struct vgt_device *vgt, *tmp;
 	struct pgt_device *pdev = &default_device;
 	int i;
+	unsigned long flags;
 
 	vgt_cleanup_mmio_dev(pdev);
 
@@ -718,18 +720,18 @@ void vgt_destroy(void)
 
 	vgt_cleanup_ctx_scheduler(pdev);
 
+	cancel_work_sync(&pdev->hpd_work.work);
+
 	/* do we need the thread actually stopped? */
 	kthread_stop(pdev->p_thread);
 
 	vgt_irq_exit(pdev);
 
 	/* Deactive all VGTs */
-	while ( !list_empty(&pdev->rendering_runq_head) ) {
-		list_for_each (pos, &pdev->rendering_runq_head) {
-			vgt = list_entry (pos, struct vgt_device, list);
-			vgt_disable_render(vgt);
-		}
-	};
+	spin_lock_irqsave(&pdev->lock, flags);
+
+	list_for_each_entry_safe(vgt, tmp, &pdev->rendering_runq_head, list)
+		vgt_disable_render(vgt);
 
 	/* Destruct all vgt_debugfs */
 	vgt_release_debugfs();
@@ -739,20 +741,18 @@ void vgt_destroy(void)
 	if (pdev->saved_gtt)
 		vfree(pdev->saved_gtt);
 	free_gtt(pdev);
+	vgt_gtt_clean(pdev);
 
 	if (pdev->gmadr_va)
 		iounmap(pdev->gmadr_va);
 	if (pdev->opregion_va)
 		iounmap(pdev->opregion_va);
 
-	while ( !list_empty(&pdev->rendering_idleq_head)) {
-		for (pos = pdev->rendering_idleq_head.next;
-			pos != &pdev->rendering_idleq_head; pos = next) {
-			next = pos->next;
-			vgt = list_entry (pos, struct vgt_device, list);
-			vgt_release_instance(vgt);
-		}
-	}
+	spin_unlock_irqrestore(&pdev->lock, flags);
+
+	list_for_each_entry_safe(vgt, tmp, &pdev->rendering_idleq_head, list)
+		vgt_release_instance(vgt);
+
 	vgt_clear_mmio_table();
 	vfree(pdev->reg_info);
 	vfree(pdev->initial_mmio_state);
diff --git a/drivers/xen/xengt.c b/drivers/xen/xengt.c
index 96dfa5b..33c07c3 100644
--- a/drivers/xen/xengt.c
+++ b/drivers/xen/xengt.c
@@ -895,13 +895,14 @@ static int vgt_emulation_thread(void *priv)
 		ret = wait_event_freezable(info->io_event_wq,
 			kthread_should_stop() ||
 			bitmap_weight(info->ioreq_pending, nr_vcpus));
-		if (ret)
-			vgt_warn("Emulation thread(%d) waken up"
-				 "by unexpected signal!\n", vgt->vm_id);
 
 		if (kthread_should_stop())
 			return 0;
 
+		if (ret)
+			vgt_warn("Emulation thread(%d) waken up"
+				 "by unexpected signal!\n", vgt->vm_id);
+
 		for (vcpu = 0; vcpu < nr_vcpus; vcpu++) {
 			if (!test_and_clear_bit(vcpu, info->ioreq_pending))
 				continue;
@@ -914,8 +915,14 @@ static int vgt_emulation_thread(void *priv)
 				xen_shutdown_domain(vgt->vm_id);
 			}
 
-			if (vgt->force_removal)
-				wait_event(vgt->pdev->destroy_wq, !vgt->force_removal);
+			if (vgt->force_removal) {
+				wait_event(vgt->pdev->destroy_wq,
+						kthread_should_stop() ||
+						!vgt->force_removal);
+				if (kthread_should_stop())
+					return 0;
+			}
+
 
 			ioreq->state = STATE_IORESP_READY;
 
@@ -972,15 +979,15 @@ static void xen_hvm_exit(struct vgt_device *vgt)
 	if (info == NULL)
 		return;
 
-	if (info->iosrv_id != 0)
-		hvm_destroy_iorequest_server(vgt);
-
 	if (info->emulation_thread != NULL)
 		kthread_stop(info->emulation_thread);
 
 	if (!info->nr_vcpu || info->evtchn_irq == NULL)
 		goto out1;
 
+	if (info->iosrv_id != 0)
+		hvm_destroy_iorequest_server(vgt);
+
 	for (vcpu = 0; vcpu < info->nr_vcpu; vcpu++){
 		if(info->evtchn_irq[vcpu] >= 0)
 			unbind_from_irqhandler(info->evtchn_irq[vcpu], vgt);
-- 
1.7.10.4

