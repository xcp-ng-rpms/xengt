From a09a9dd9b914c90b97e478f97099d3b85e7c7fed Mon Sep 17 00:00:00 2001
From: "Niu,Bing" <bing.niu@intel.com>
Date: Wed, 2 Sep 2015 10:02:14 -0400
Subject: [PATCH 161/403] vgt: dispaly use virtual vblank for VMs all time

use timer base virtual blank for VMs. previously, vms'vblank is triggerd
by physical interrupt if pipe is enables by dom0, or timer if pipe is
disabled by dom0. for upstream, we use timer to trigger interrupt always

Signed-off-by: Niu,Bing <bing.niu@intel.com>
---
 drivers/gpu/drm/i915/vgt/display.c   |  110 +++-------------------------------
 drivers/gpu/drm/i915/vgt/display.h   |    1 -
 drivers/gpu/drm/i915/vgt/handlers.c  |   14 -----
 drivers/gpu/drm/i915/vgt/interrupt.c |   19 +++---
 drivers/gpu/drm/i915/vgt/vgt.h       |    2 -
 5 files changed, 16 insertions(+), 130 deletions(-)

diff --git a/drivers/gpu/drm/i915/vgt/display.c b/drivers/gpu/drm/i915/vgt/display.c
index 853584a..78b81f7 100644
--- a/drivers/gpu/drm/i915/vgt/display.c
+++ b/drivers/gpu/drm/i915/vgt/display.c
@@ -457,9 +457,6 @@ bool rebuild_pipe_mapping(struct vgt_device *vgt, unsigned int reg, uint32_t new
 			vgt_set_pipe_mapping(vgt, virtual_pipe, I915_MAX_PIPES);
 			vgt_update_irq_reg(vgt);
 			vgt_dbg(VGT_DBG_DPY, "vGT: delete pipe mapping %x\n", virtual_pipe);
-			if (vgt_has_pipe_enabled(vgt, virtual_pipe))
-				vgt_update_frmcount(vgt, virtual_pipe);
-			vgt_calculate_frmcount_delta(vgt, virtual_pipe);
 		}
 		return true;
 	}
@@ -513,9 +510,6 @@ bool rebuild_pipe_mapping(struct vgt_device *vgt, unsigned int reg, uint32_t new
 	vgt_set_pipe_mapping(vgt, virtual_pipe, physical_pipe);
 	vgt_dbg(VGT_DBG_DPY, "vGT: add pipe mapping  %x - > %x \n", virtual_pipe, physical_pipe);
 	vgt_update_irq_reg(vgt);
-	if (vgt_has_pipe_enabled(vgt, virtual_pipe))
-		vgt_update_frmcount(vgt, virtual_pipe);
-	vgt_calculate_frmcount_delta(vgt, virtual_pipe);
 
 	if (current_foreground_vm(vgt->pdev) == vgt) {
 		vgt_restore_state(vgt, virtual_pipe);
@@ -540,9 +534,6 @@ bool update_pipe_mapping(struct vgt_device *vgt, unsigned int physical_reg, uint
 			if(vgt->pipe_mapping[i] == physical_pipe) {
 				vgt_set_pipe_mapping(vgt, i, I915_MAX_PIPES);
 				vgt_dbg(VGT_DBG_DPY, "vGT: Update mapping: delete pipe %x  \n", i);
-				if (vgt_has_pipe_enabled(vgt, i))
-					vgt_update_frmcount(vgt, i);
-				vgt_calculate_frmcount_delta(vgt, i);
 			}
 		}
 		vgt_update_irq_reg(vgt);
@@ -583,9 +574,6 @@ bool update_pipe_mapping(struct vgt_device *vgt, unsigned int physical_reg, uint
 		vgt_set_pipe_mapping(vgt, virtual_pipe, physical_pipe);
 		vgt_dbg(VGT_DBG_DPY, "vGT: Update pipe mapping  %x - > %x \n", virtual_pipe, physical_pipe);
 		vgt_update_irq_reg(vgt);
-		if (vgt_has_pipe_enabled(vgt, virtual_pipe))
-			vgt_update_frmcount(vgt, virtual_pipe);
-		vgt_calculate_frmcount_delta(vgt, virtual_pipe);
 	}
 
 	if (current_foreground_vm(vgt->pdev) == vgt &&
@@ -709,13 +697,10 @@ bool vgt_manage_emul_dpy_events(struct pgt_device *pdev)
 {
 	int i;
 	enum vgt_pipe pipe;
-	unsigned hw_enabled_pipes, hvm_required_pipes;
 	struct vgt_irq_host_state *hstate = pdev->irq_hstate;
-	bool hvm_no_pipe_mapping = false;
-
+	bool emul_enable = false;
 
 	ASSERT(spin_is_locked(&pdev->lock));
-	hw_enabled_pipes = hvm_required_pipes = 0;
 
 	for (i = 0; i < VGT_MAX_VMS; i++) {
 		struct vgt_device *vgt = pdev->device[i];
@@ -724,113 +709,32 @@ bool vgt_manage_emul_dpy_events(struct pgt_device *pdev)
 		if (vgt == NULL)
 			continue;
 
+		if (is_current_display_owner(vgt))
+			continue;
+
 		for (pipe = PIPE_A; pipe < I915_MAX_PIPES; pipe ++) {
 			pipeconf = __vreg(vgt, VGT_PIPECONF(pipe));
 			if (pipeconf & _REGBIT_PIPE_ENABLE) {
-				if (is_current_display_owner(vgt))
-					hw_enabled_pipes |= (1 << pipe);
-				else {
-					enum vgt_pipe p_pipe;
-					p_pipe  = vgt->pipe_mapping[pipe];
-					if (p_pipe != I915_MAX_PIPES) {
-						hvm_required_pipes |=
-								(1 << pipe);
-					} else {
-						hvm_no_pipe_mapping = true;
-						break;
-					}
-				}
+				emul_enable = true;
 			}
 		}
 
 		pipeconf = __vreg(vgt, _REG_PIPE_EDP_CONF);
 		if (pipeconf & _REGBIT_PIPE_ENABLE) {
-			pipe = get_edp_input(
-				__vreg(vgt, TRANS_DDI_FUNC_CTL_EDP));
-			if (pipe == I915_MAX_PIPES) {
-				vgt_err("vGT(%d): "
-					"Invalid input selection for eDP\n",
-					vgt->vgt_id);
-				return false;
-			}
-			if (is_current_display_owner(vgt))
-				hw_enabled_pipes |= (1 << pipe);
-			else {
-				enum vgt_pipe p_pipe = vgt->pipe_mapping[pipe];
-				if (p_pipe != I915_MAX_PIPES) {
-					hvm_required_pipes |= (1 << pipe);
-				} else {
-					hvm_no_pipe_mapping = true;
-					break;
-				}
-			}
+			emul_enable = true;
 		}
 	}
 
 	hrtimer_cancel(&hstate->dpy_timer.timer);
-	if (hvm_no_pipe_mapping || (hvm_required_pipes & ~hw_enabled_pipes)) {
+	if (emul_enable) {
 		/*there is hvm enabled pipe which is not enabled on hardware */
 		hrtimer_start(&hstate->dpy_timer.timer,
 			ktime_add_ns(ktime_get(), hstate->dpy_timer.period),
 			HRTIMER_MODE_ABS);
 	}
-
 	return true;
 }
 
-void vgt_update_frmcount(struct vgt_device *vgt,
-	enum vgt_pipe pipe)
-{
-	uint32_t v_counter_addr, count, delta;
-	enum vgt_pipe phys_pipe;
-	v_counter_addr = VGT_PIPE_FRMCOUNT(pipe);
-	phys_pipe = vgt->pipe_mapping[pipe];
-	delta = vgt->frmcount_delta[pipe];
-	if (phys_pipe == I915_MAX_PIPES)
-		__vreg(vgt, v_counter_addr) = delta;
-	else {
-		uint32_t p_counter_addr = VGT_PIPE_FRMCOUNT(phys_pipe);
-		count = VGT_MMIO_READ(vgt->pdev, p_counter_addr);
-		if (count <= 0xffffffff - delta) {
-			__vreg(vgt, v_counter_addr) = count + delta;
-		} else { /* wrap it */
-			count = 0xffffffff - count;
-			__vreg(vgt, v_counter_addr) = delta - count - 1;
-		}
-	}
-}
-
-/* the calculation of delta may eliminate un-read frmcount in vreg.
- * so if pipe is enabled, need to update frmcount first before
- * calculating the delta
- */
-void vgt_calculate_frmcount_delta(struct vgt_device *vgt,
-	enum vgt_pipe pipe)
-{
-	uint32_t delta;
-	uint32_t virt_counter = __vreg(vgt, VGT_PIPE_FRMCOUNT(pipe));
-	enum vgt_pipe phys_pipe = vgt->pipe_mapping[pipe];
-	uint32_t hw_counter;
-
-	/* if physical pipe is not enabled yet, Delta will be used
-	 * as the frmcount. When physical pipe is enabled, new delta
-	 * will be calculated based on the hw count value.
-	 */
-	if (phys_pipe == I915_MAX_PIPES) {
-		vgt->frmcount_delta[pipe] = virt_counter;
-	} else {
-		hw_counter = VGT_MMIO_READ(vgt->pdev,
-					VGT_PIPE_FRMCOUNT(pipe));
-		if (virt_counter >= hw_counter)
-			delta = virt_counter - hw_counter;
-		else {
-			delta = 0xffffffff - hw_counter;
-			delta += virt_counter + 1;
-		}
-		vgt->frmcount_delta[pipe] = delta;
-	}
-}
-
 void vgt_set_power_well(struct vgt_device *vgt, bool to_enable)
 {
 	bool is_enabled, enable_requested;
diff --git a/drivers/gpu/drm/i915/vgt/display.h b/drivers/gpu/drm/i915/vgt/display.h
index 31dd2d1..a363d6f 100644
--- a/drivers/gpu/drm/i915/vgt/display.h
+++ b/drivers/gpu/drm/i915/vgt/display.h
@@ -348,5 +348,4 @@ void vgt_flush_port_info(struct vgt_device *vgt, struct gt_port *port);
 void vgt_detect_display(struct vgt_device *vgt, int index);
 
 void vgt_dpy_init_modes(vgt_reg_t *mmio_array);
-
 #endif /*_VGT_DISPLAY_H_*/
diff --git a/drivers/gpu/drm/i915/vgt/handlers.c b/drivers/gpu/drm/i915/vgt/handlers.c
index a06b2e7..ace199b 100755
--- a/drivers/gpu/drm/i915/vgt/handlers.c
+++ b/drivers/gpu/drm/i915/vgt/handlers.c
@@ -515,9 +515,6 @@ static bool pipe_frmcount_mmio_read(struct vgt_device *vgt, unsigned int offset,
 	pipe = VGT_FRMCOUNTPIPE(offset);
 	ASSERT(pipe >= PIPE_A && pipe < I915_MAX_PIPES);
 
-	if (vgt_has_pipe_enabled(vgt, pipe))
-		vgt_update_frmcount(vgt, pipe);
-
 	*(vgt_reg_t *)p_data = __vreg(vgt, offset);
 
 	return true;
@@ -839,23 +836,12 @@ static bool pipe_conf_mmio_write(struct vgt_device *vgt, unsigned int offset,
 			pipe = I915_MAX_PIPES;
 	}
 
-	if (orig_pipe_enabled && !curr_pipe_enabled) {
-		if (pipe != I915_MAX_PIPES) {
-			vgt_update_frmcount(vgt, pipe);
-		} else {
-			vgt_update_frmcount(vgt, PIPE_A);
-			vgt_update_frmcount(vgt, PIPE_B);
-			vgt_update_frmcount(vgt, PIPE_C);
-		}
-	}
-
 	if (!orig_pipe_enabled && curr_pipe_enabled) {
 		if (pipe == I915_MAX_PIPES) {
 			vgt_err("VM(%d): eDP pipe does not have corresponding"
 				"mapped pipe while it is enabled!\n", vgt->vm_id);
 			return false;
 		}
-		vgt_calculate_frmcount_delta(vgt, pipe);
 
 		for (plane = PRIMARY_PLANE; plane < MAX_PLANE; plane++) {
 			vgt_surf_base_range_check(vgt, pipe, plane);
diff --git a/drivers/gpu/drm/i915/vgt/interrupt.c b/drivers/gpu/drm/i915/vgt/interrupt.c
index a5dd80c..477f10e 100644
--- a/drivers/gpu/drm/i915/vgt/interrupt.c
+++ b/drivers/gpu/drm/i915/vgt/interrupt.c
@@ -1828,15 +1828,10 @@ static inline void vgt_emulate_vblank(struct vgt_device *vgt,
 		ASSERT(0);
 	}
 
-	if (vgt_has_pipe_enabled(vgt, pipe)) {
-		enum vgt_pipe phys_pipe = vgt->pipe_mapping[pipe];
-		if ((phys_pipe == I915_MAX_PIPES) ||
-			!pdev_has_pipe_enabled(vgt->pdev, phys_pipe)) {
-			uint32_t delta = vgt->frmcount_delta[pipe];
-			vgt->frmcount_delta[pipe] = ((delta == 0xffffffff) ?
-						0 : ++ delta);
-			vgt_trigger_virtual_event(vgt, vblank);
-		}
+	if ((__vreg(vgt, VGT_PIPECONF(pipe)) & _REGBIT_PIPE_ENABLE) ||
+			(__vreg(vgt, _REG_PIPE_EDP_CONF) & _REGBIT_PIPE_ENABLE)) {
+		__vreg(vgt, VGT_PIPE_FRMCOUNT(pipe))++;
+		vgt_trigger_virtual_event(vgt, vblank);
 	}
 }
 
@@ -2041,8 +2036,12 @@ static void vgt_init_events(
 	SET_POLICY_DOM0(hstate, CRT_HOTPLUG);
 
 	SET_POLICY_DOM0(hstate, GMBUS);
-}
+	/* phsical vBlank only to DOM0, VM's vBlank is vir*/
+	SET_POLICY_DOM0(hstate, PIPE_A_VBLANK);
+	SET_POLICY_DOM0(hstate, PIPE_B_VBLANK);
+	SET_POLICY_DOM0(hstate, PIPE_C_VBLANK);
 
+}
 static enum hrtimer_restart vgt_dpy_timer_fn(struct hrtimer *data)
 {
 	struct vgt_emul_timer *dpy_timer;
diff --git a/drivers/gpu/drm/i915/vgt/vgt.h b/drivers/gpu/drm/i915/vgt/vgt.h
index 0111291..54482f1 100755
--- a/drivers/gpu/drm/i915/vgt/vgt.h
+++ b/drivers/gpu/drm/i915/vgt/vgt.h
@@ -299,8 +299,6 @@ struct vgt_device {
 	uint64_t submitted_cmds;	/* CMDs submitted in current slice */
 	uint64_t allocated_cmds;	/* CMDs allocated in current slice */
 
-	uint32_t frmcount_delta[I915_MAX_PIPES]; /* used for vblank virtualization*/
-
 	struct sbi_registers sbi_regs;
 
 	unsigned long reset_flags;
-- 
1.7.10.4

