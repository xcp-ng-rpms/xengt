From 7f8baaee65ce5db9776c1f07157976d9c8daa49d Mon Sep 17 00:00:00 2001
From: Zhi Wang <zhi.a.wang@intel.com>
Date: Sun, 7 Jun 2015 22:57:34 +0800
Subject: [PATCH 095/403] vgt: refine checking incomplete partial access
 sequence

Signed-off-by: Zhi Wang <zhi.a.wang@intel.com>
---
 drivers/gpu/drm/i915/vgt/gtt.c |   29 ++++++++++++++++-------------
 drivers/gpu/drm/i915/vgt/vgt.h |    7 ++++---
 2 files changed, 20 insertions(+), 16 deletions(-)

diff --git a/drivers/gpu/drm/i915/vgt/gtt.c b/drivers/gpu/drm/i915/vgt/gtt.c
index e39cc6c..cd5155b 100644
--- a/drivers/gpu/drm/i915/vgt/gtt.c
+++ b/drivers/gpu/drm/i915/vgt/gtt.c
@@ -532,8 +532,8 @@ void vgt_clean_guest_page(struct vgt_device *vgt, guest_page_t *guest_page)
 	if (guest_page->writeprotection)
 		hypervisor_unset_wp_pages(vgt, guest_page);
 
-	if (guest_page == vgt->gtt.last_partial_access_gpt)
-		vgt->gtt.last_partial_access_index = -1;
+	if (guest_page == vgt->gtt.last_partial_ppgtt_access_gpt)
+		vgt->gtt.last_partial_ppgtt_access_index = -1;
 }
 
 guest_page_t *vgt_find_guest_page(struct vgt_device *vgt, unsigned long gfn)
@@ -1147,18 +1147,21 @@ bool ppgtt_check_partial_access(struct vgt_device *vgt)
 {
 	struct vgt_vgtt_info *gtt = &vgt->gtt;
 
-	if (gtt->last_partial_access_index == -1)
+	if (gtt->last_partial_ppgtt_access_index == -1)
 		return true;
 
-	vgt_err("Incomplete page table access sequence.\n");
+	if (!gtt->warn_partial_ppgtt_access_once) {
+		vgt_warn("Incomplete PPGTT page table access sequence.\n");
+		gtt->warn_partial_ppgtt_access_once = true;
+	}
 
 	if (!ppgtt_handle_guest_write_page_table(
-			gtt->last_partial_access_gpt,
-			&gtt->last_partial_access_entry,
-			gtt->last_partial_access_index))
+			gtt->last_partial_ppgtt_access_gpt,
+			&gtt->last_partial_ppgtt_access_entry,
+			gtt->last_partial_ppgtt_access_index))
 		return false;
 
-	gtt->last_partial_access_index = -1;
+	gtt->last_partial_ppgtt_access_index = -1;
 	return true;
 }
 
@@ -1201,13 +1204,13 @@ static bool ppgtt_handle_guest_write_page_table_bytes(void *gp,
 		se.val64 = 0;
 		ppgtt_set_shadow_entry(spt, &se, index);
 
-		gtt->last_partial_access_index = index;
-		gtt->last_partial_access_gpt = gpt;
-		gtt->last_partial_access_entry = we;
+		gtt->last_partial_ppgtt_access_index = index;
+		gtt->last_partial_ppgtt_access_gpt = gpt;
+		gtt->last_partial_ppgtt_access_entry = we;
 
 		return true;
 	} else
-		gtt->last_partial_access_index = -1;
+		gtt->last_partial_ppgtt_access_index = -1;
 
 	if (hi)
 		trace_gpt_change(vgt->vm_id, "partial access - HIGH",
@@ -1950,7 +1953,7 @@ bool vgt_init_vgtt(struct vgt_device *vgt)
 	INIT_LIST_HEAD(&gtt->mm_list_head);
 	INIT_LIST_HEAD(&gtt->oos_page_list_head);
 
-	gtt->last_partial_access_index = -1;
+	gtt->last_partial_ppgtt_access_index = -1;
 
 	if (!vgt_expand_shadow_page_mempool(vgt->pdev)) {
 		vgt_err("fail to expand the shadow page mempool.");
diff --git a/drivers/gpu/drm/i915/vgt/vgt.h b/drivers/gpu/drm/i915/vgt/vgt.h
index 4d628c4..d0e0505 100644
--- a/drivers/gpu/drm/i915/vgt/vgt.h
+++ b/drivers/gpu/drm/i915/vgt/vgt.h
@@ -618,9 +618,10 @@ struct vgt_vgtt_info {
 	DECLARE_HASHTABLE(el_ctx_hash_table, VGT_HASH_BITS);
 	atomic_t n_write_protected_guest_page;
 	struct list_head oos_page_list_head;
-	int last_partial_access_index;
-	gtt_entry_t last_partial_access_entry;
-	struct guest_page *last_partial_access_gpt;
+	int last_partial_ppgtt_access_index;
+	gtt_entry_t last_partial_ppgtt_access_entry;
+	struct guest_page *last_partial_ppgtt_access_gpt;
+	bool warn_partial_ppgtt_access_once;
 };
 
 extern bool vgt_init_vgtt(struct vgt_device *vgt);
-- 
1.7.10.4

